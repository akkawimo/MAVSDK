// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/winch/winch.proto)

#include <iomanip>

#include "winch_impl.h"
#include "plugins/winch/winch.h"

namespace mavsdk {





Winch::Winch(System& system) : PluginBase(), _impl{std::make_unique<WinchImpl>(system)} {}

Winch::Winch(std::shared_ptr<System> system) : PluginBase(), _impl{std::make_unique<WinchImpl>(system)} {}


Winch::~Winch() {}



void Winch::relax_async(uint32_t instance, const ResultCallback callback)
{
    _impl->relax_async(instance, callback);
}



Winch::Result Winch::relax(uint32_t instance) const
{
    return _impl->relax(instance);
}



void Winch::relative_length_control_async(uint32_t instance, float length, float rate, const ResultCallback callback)
{
    _impl->relative_length_control_async(instance, length, rate, callback);
}



Winch::Result Winch::relative_length_control(uint32_t instance, float length, float rate) const
{
    return _impl->relative_length_control(instance, length, rate);
}



void Winch::rate_control_async(uint32_t instance, float rate, const ResultCallback callback)
{
    _impl->rate_control_async(instance, rate, callback);
}



Winch::Result Winch::rate_control(uint32_t instance, float rate) const
{
    return _impl->rate_control(instance, rate);
}



void Winch::lock_async(uint32_t instance, const ResultCallback callback)
{
    _impl->lock_async(instance, callback);
}



Winch::Result Winch::lock(uint32_t instance) const
{
    return _impl->lock(instance);
}



void Winch::deliver_async(uint32_t instance, const ResultCallback callback)
{
    _impl->deliver_async(instance, callback);
}



Winch::Result Winch::deliver(uint32_t instance) const
{
    return _impl->deliver(instance);
}



void Winch::hold_async(uint32_t instance, const ResultCallback callback)
{
    _impl->hold_async(instance, callback);
}



Winch::Result Winch::hold(uint32_t instance) const
{
    return _impl->hold(instance);
}



void Winch::retract_async(uint32_t instance, const ResultCallback callback)
{
    _impl->retract_async(instance, callback);
}



Winch::Result Winch::retract(uint32_t instance) const
{
    return _impl->retract(instance);
}



void Winch::load_line_async(uint32_t instance, const ResultCallback callback)
{
    _impl->load_line_async(instance, callback);
}



Winch::Result Winch::load_line(uint32_t instance) const
{
    return _impl->load_line(instance);
}



void Winch::abandon_line_async(uint32_t instance, const ResultCallback callback)
{
    _impl->abandon_line_async(instance, callback);
}



Winch::Result Winch::abandon_line(uint32_t instance) const
{
    return _impl->abandon_line(instance);
}



void Winch::load_payload_async(uint32_t instance, const ResultCallback callback)
{
    _impl->load_payload_async(instance, callback);
}



Winch::Result Winch::load_payload(uint32_t instance) const
{
    return _impl->load_payload(instance);
}




std::ostream& operator<<(std::ostream& str, Winch::Result const& result)
{
    switch (result) {
        case Winch::Result::Unknown:
            return str << "Unknown";
        case Winch::Result::Success:
            return str << "Success";
        case Winch::Result::NoSystem:
            return str << "No System";
        case Winch::Result::ConnectionError:
            return str << "Connection Error";
        case Winch::Result::Busy:
            return str << "Busy";
        case Winch::Result::CommandDenied:
            return str << "Command Denied";
        case Winch::Result::CommandDeniedLandedStateUnknown:
            return str << "Command Denied Landed State Unknown";
        case Winch::Result::CommandDeniedNotLanded:
            return str << "Command Denied Not Landed";
        case Winch::Result::Timeout:
            return str << "Timeout";
        case Winch::Result::VtolTransitionSupportUnknown:
            return str << "Vtol Transition Support Unknown";
        case Winch::Result::NoVtolTransitionSupport:
            return str << "No Vtol Transition Support";
        case Winch::Result::ParameterError:
            return str << "Parameter Error";
        case Winch::Result::Unsupported:
            return str << "Unsupported";
        case Winch::Result::Failed:
            return str << "Failed";
        default:
            return str << "Unknown";
    }
}



std::ostream& operator<<(std::ostream& str, Winch::WinchAction const& winch_action)
{
    switch (winch_action) {
        case Winch::WinchAction::Relaxed:
            return str << "Relaxed";
        case Winch::WinchAction::RelativeLengthControl:
            return str << "Relative Length Control";
        case Winch::WinchAction::RateControl:
            return str << "Rate Control";
        case Winch::WinchAction::Lock:
            return str << "Lock";
        case Winch::WinchAction::Deliver:
            return str << "Deliver";
        case Winch::WinchAction::Hold:
            return str << "Hold";
        case Winch::WinchAction::Retract:
            return str << "Retract";
        case Winch::WinchAction::LoadLine:
            return str << "Load Line";
        case Winch::WinchAction::AbandonLine:
            return str << "Abandon Line";
        case Winch::WinchAction::LoadPayload:
            return str << "Load Payload";
        default:
            return str << "Unknown";
    }
}


} // namespace mavsdk