// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/main/protos/winch/winch.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "plugin_base.h"

#include "handle.h"

namespace mavsdk {

class System;
class WinchImpl;

/**
 * @brief
 */
class Winch : public PluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto winch = Winch(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit Winch(System& system); // deprecated

    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto winch = Winch(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit Winch(std::shared_ptr<System> system); // new

    /**
     * @brief Destructor (internal use only).
     */
    ~Winch() override;

    /**
     * @brief
     */
    enum class WinchAction {
        Relaxed, /**< @brief. */
        RelativeLengthControl, /**< @brief. */
        RateControl, /**< @brief. */
        Lock, /**< @brief. */
        Deliver, /**< @brief. */
        Hold, /**< @brief. */
        Retract, /**< @brief. */
        LoadLine, /**< @brief. */
        AbandonLine, /**< @brief. */
        LoadPayload, /**< @brief. */
    };

    /**
     * @brief Stream operator to print information about a `Winch::WinchAction`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Winch::WinchAction const& winch_action);

    /**
     * @brief Possible results returned for action requests.
     */
    enum class Result {
        Unknown, /**< @brief Unknown result. */
        Success, /**< @brief Request was successful. */
        NoSystem, /**< @brief No system is connected. */
        ConnectionError, /**< @brief Connection error. */
        Busy, /**< @brief Vehicle is busy. */
        CommandDenied, /**< @brief Command refused by vehicle. */
        CommandDeniedLandedStateUnknown, /**< @brief Command refused because landed state is
                                            unknown. */
        CommandDeniedNotLanded, /**< @brief Command refused because vehicle not landed. */
        Timeout, /**< @brief Request timed out. */
        VtolTransitionSupportUnknown, /**< @brief Hybrid/VTOL transition support is unknown. */
        NoVtolTransitionSupport, /**< @brief Vehicle does not support hybrid/VTOL transitions. */
        ParameterError, /**< @brief Error getting or setting parameter. */
        Unsupported, /**< @brief Action not supported. */
        Failed, /**< @brief Action failed. */
    };

    /**
     * @brief Stream operator to print information about a `Winch::Result`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Winch::Result const& result);

    /**
     * @brief Callback type for asynchronous Winch calls.
     */
    using ResultCallback = std::function<void(Result)>;

    /**
     * @brief Winch grab cargo.
     *
     * This function is non-blocking. See 'relax' for the blocking counterpart.
     */
    void relax_async(uint32_t instance, const ResultCallback callback);

    /**
     * @brief Winch grab cargo.
     *
     * This function is blocking. See 'relax_async' for the non-blocking counterpart.
     *
     * @return Result of request.
     */
    Result relax(uint32_t instance) const;

    /**
     * @brief Winch release cargo.
     *
     * This function is non-blocking. See 'relative_length_control' for the blocking counterpart.
     */
    void relative_length_control_async(
        uint32_t instance, float length, float rate, const ResultCallback callback);

    /**
     * @brief Winch release cargo.
     *
     * This function is blocking. See 'relative_length_control_async' for the non-blocking
     * counterpart.
     *
     * @return Result of request.
     */
    Result relative_length_control(uint32_t instance, float length, float rate) const;

    /**
     * @brief Wind or unwind line at specified rate.
     *
     * This function is non-blocking. See 'rate_control' for the blocking counterpart.
     */
    void rate_control_async(uint32_t instance, float rate, const ResultCallback callback);

    /**
     * @brief Wind or unwind line at specified rate.
     *
     * This function is blocking. See 'rate_control_async' for the non-blocking counterpart.
     *
     * @return Result of request.
     */
    Result rate_control(uint32_t instance, float rate) const;

    /**
     * @brief
     *
     * This function is non-blocking. See 'lock' for the blocking counterpart.
     */
    void lock_async(uint32_t instance, const ResultCallback callback);

    /**
     * @brief
     *
     * This function is blocking. See 'lock_async' for the non-blocking counterpart.
     *
     * @return Result of request.
     */
    Result lock(uint32_t instance) const;

    /**
     * @brief
     *
     * This function is non-blocking. See 'deliver' for the blocking counterpart.
     */
    void deliver_async(uint32_t instance, const ResultCallback callback);

    /**
     * @brief
     *
     * This function is blocking. See 'deliver_async' for the non-blocking counterpart.
     *
     * @return Result of request.
     */
    Result deliver(uint32_t instance) const;

    /**
     * @brief
     *
     * This function is non-blocking. See 'hold' for the blocking counterpart.
     */
    void hold_async(uint32_t instance, const ResultCallback callback);

    /**
     * @brief
     *
     * This function is blocking. See 'hold_async' for the non-blocking counterpart.
     *
     * @return Result of request.
     */
    Result hold(uint32_t instance) const;

    /**
     * @brief
     *
     * This function is non-blocking. See 'retract' for the blocking counterpart.
     */
    void retract_async(uint32_t instance, const ResultCallback callback);

    /**
     * @brief
     *
     * This function is blocking. See 'retract_async' for the non-blocking counterpart.
     *
     * @return Result of request.
     */
    Result retract(uint32_t instance) const;

    /**
     * @brief
     *
     * This function is non-blocking. See 'load_line' for the blocking counterpart.
     */
    void load_line_async(uint32_t instance, const ResultCallback callback);

    /**
     * @brief
     *
     * This function is blocking. See 'load_line_async' for the non-blocking counterpart.
     *
     * @return Result of request.
     */
    Result load_line(uint32_t instance) const;

    /**
     * @brief
     *
     * This function is non-blocking. See 'abandon_line' for the blocking counterpart.
     */
    void abandon_line_async(uint32_t instance, const ResultCallback callback);

    /**
     * @brief
     *
     * This function is blocking. See 'abandon_line_async' for the non-blocking counterpart.
     *
     * @return Result of request.
     */
    Result abandon_line(uint32_t instance) const;

    /**
     * @brief
     *
     * This function is non-blocking. See 'load_payload' for the blocking counterpart.
     */
    void load_payload_async(uint32_t instance, const ResultCallback callback);

    /**
     * @brief
     *
     * This function is blocking. See 'load_payload_async' for the non-blocking counterpart.
     *
     * @return Result of request.
     */
    Result load_payload(uint32_t instance) const;

    /**
     * @brief Copy constructor.
     */
    Winch(const Winch& other);

    /**
     * @brief Equality operator (object is not copyable).
     */
    const Winch& operator=(const Winch&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<WinchImpl> _impl;
};

} // namespace mavsdk