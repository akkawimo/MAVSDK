// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: winch/winch.proto

#include "winch/winch.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mavsdk {
namespace rpc {
namespace winch {
PROTOBUF_CONSTEXPR WinchRelaxRequest::WinchRelaxRequest(
    ::_pbi::ConstantInitialized)
  : instance_(0u){}
struct WinchRelaxRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchRelaxRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchRelaxRequestDefaultTypeInternal() {}
  union {
    WinchRelaxRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchRelaxRequestDefaultTypeInternal _WinchRelaxRequest_default_instance_;
PROTOBUF_CONSTEXPR WinchRelaxResponse::WinchRelaxResponse(
    ::_pbi::ConstantInitialized)
  : action_result_(nullptr){}
struct WinchRelaxResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchRelaxResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchRelaxResponseDefaultTypeInternal() {}
  union {
    WinchRelaxResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchRelaxResponseDefaultTypeInternal _WinchRelaxResponse_default_instance_;
PROTOBUF_CONSTEXPR WinchRelativeLengthControlRequest::WinchRelativeLengthControlRequest(
    ::_pbi::ConstantInitialized)
  : instance_(0u)
  , length_(0)
  , rate_(0){}
struct WinchRelativeLengthControlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchRelativeLengthControlRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchRelativeLengthControlRequestDefaultTypeInternal() {}
  union {
    WinchRelativeLengthControlRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchRelativeLengthControlRequestDefaultTypeInternal _WinchRelativeLengthControlRequest_default_instance_;
PROTOBUF_CONSTEXPR WinchRelativeLengthControlResponse::WinchRelativeLengthControlResponse(
    ::_pbi::ConstantInitialized)
  : action_result_(nullptr){}
struct WinchRelativeLengthControlResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchRelativeLengthControlResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchRelativeLengthControlResponseDefaultTypeInternal() {}
  union {
    WinchRelativeLengthControlResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchRelativeLengthControlResponseDefaultTypeInternal _WinchRelativeLengthControlResponse_default_instance_;
PROTOBUF_CONSTEXPR WinchRateControlRequest::WinchRateControlRequest(
    ::_pbi::ConstantInitialized)
  : instance_(0u)
  , rate_(0){}
struct WinchRateControlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchRateControlRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchRateControlRequestDefaultTypeInternal() {}
  union {
    WinchRateControlRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchRateControlRequestDefaultTypeInternal _WinchRateControlRequest_default_instance_;
PROTOBUF_CONSTEXPR WinchRateControlResponse::WinchRateControlResponse(
    ::_pbi::ConstantInitialized)
  : action_result_(nullptr){}
struct WinchRateControlResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchRateControlResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchRateControlResponseDefaultTypeInternal() {}
  union {
    WinchRateControlResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchRateControlResponseDefaultTypeInternal _WinchRateControlResponse_default_instance_;
PROTOBUF_CONSTEXPR WinchLockRequest::WinchLockRequest(
    ::_pbi::ConstantInitialized)
  : instance_(0u){}
struct WinchLockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchLockRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchLockRequestDefaultTypeInternal() {}
  union {
    WinchLockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchLockRequestDefaultTypeInternal _WinchLockRequest_default_instance_;
PROTOBUF_CONSTEXPR WinchLockResponse::WinchLockResponse(
    ::_pbi::ConstantInitialized)
  : action_result_(nullptr){}
struct WinchLockResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchLockResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchLockResponseDefaultTypeInternal() {}
  union {
    WinchLockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchLockResponseDefaultTypeInternal _WinchLockResponse_default_instance_;
PROTOBUF_CONSTEXPR WinchDeliverRequest::WinchDeliverRequest(
    ::_pbi::ConstantInitialized)
  : instance_(0u){}
struct WinchDeliverRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchDeliverRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchDeliverRequestDefaultTypeInternal() {}
  union {
    WinchDeliverRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchDeliverRequestDefaultTypeInternal _WinchDeliverRequest_default_instance_;
PROTOBUF_CONSTEXPR WinchDeliverResponse::WinchDeliverResponse(
    ::_pbi::ConstantInitialized)
  : action_result_(nullptr){}
struct WinchDeliverResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchDeliverResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchDeliverResponseDefaultTypeInternal() {}
  union {
    WinchDeliverResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchDeliverResponseDefaultTypeInternal _WinchDeliverResponse_default_instance_;
PROTOBUF_CONSTEXPR WinchHoldRequest::WinchHoldRequest(
    ::_pbi::ConstantInitialized)
  : instance_(0u){}
struct WinchHoldRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchHoldRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchHoldRequestDefaultTypeInternal() {}
  union {
    WinchHoldRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchHoldRequestDefaultTypeInternal _WinchHoldRequest_default_instance_;
PROTOBUF_CONSTEXPR WinchHoldResponse::WinchHoldResponse(
    ::_pbi::ConstantInitialized)
  : action_result_(nullptr){}
struct WinchHoldResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchHoldResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchHoldResponseDefaultTypeInternal() {}
  union {
    WinchHoldResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchHoldResponseDefaultTypeInternal _WinchHoldResponse_default_instance_;
PROTOBUF_CONSTEXPR WinchRetractRequest::WinchRetractRequest(
    ::_pbi::ConstantInitialized)
  : instance_(0u){}
struct WinchRetractRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchRetractRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchRetractRequestDefaultTypeInternal() {}
  union {
    WinchRetractRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchRetractRequestDefaultTypeInternal _WinchRetractRequest_default_instance_;
PROTOBUF_CONSTEXPR WinchRetractResponse::WinchRetractResponse(
    ::_pbi::ConstantInitialized)
  : action_result_(nullptr){}
struct WinchRetractResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchRetractResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchRetractResponseDefaultTypeInternal() {}
  union {
    WinchRetractResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchRetractResponseDefaultTypeInternal _WinchRetractResponse_default_instance_;
PROTOBUF_CONSTEXPR WinchLoadLineRequest::WinchLoadLineRequest(
    ::_pbi::ConstantInitialized)
  : instance_(0u){}
struct WinchLoadLineRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchLoadLineRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchLoadLineRequestDefaultTypeInternal() {}
  union {
    WinchLoadLineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchLoadLineRequestDefaultTypeInternal _WinchLoadLineRequest_default_instance_;
PROTOBUF_CONSTEXPR WinchLoadLineResponse::WinchLoadLineResponse(
    ::_pbi::ConstantInitialized)
  : action_result_(nullptr){}
struct WinchLoadLineResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchLoadLineResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchLoadLineResponseDefaultTypeInternal() {}
  union {
    WinchLoadLineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchLoadLineResponseDefaultTypeInternal _WinchLoadLineResponse_default_instance_;
PROTOBUF_CONSTEXPR WinchAbandonLineRequest::WinchAbandonLineRequest(
    ::_pbi::ConstantInitialized)
  : instance_(0u){}
struct WinchAbandonLineRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchAbandonLineRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchAbandonLineRequestDefaultTypeInternal() {}
  union {
    WinchAbandonLineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchAbandonLineRequestDefaultTypeInternal _WinchAbandonLineRequest_default_instance_;
PROTOBUF_CONSTEXPR WinchAbandonLineResponse::WinchAbandonLineResponse(
    ::_pbi::ConstantInitialized)
  : action_result_(nullptr){}
struct WinchAbandonLineResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchAbandonLineResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchAbandonLineResponseDefaultTypeInternal() {}
  union {
    WinchAbandonLineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchAbandonLineResponseDefaultTypeInternal _WinchAbandonLineResponse_default_instance_;
PROTOBUF_CONSTEXPR WinchLoadPayloadRequest::WinchLoadPayloadRequest(
    ::_pbi::ConstantInitialized)
  : instance_(0u){}
struct WinchLoadPayloadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchLoadPayloadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchLoadPayloadRequestDefaultTypeInternal() {}
  union {
    WinchLoadPayloadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchLoadPayloadRequestDefaultTypeInternal _WinchLoadPayloadRequest_default_instance_;
PROTOBUF_CONSTEXPR WinchLoadPayloadResponse::WinchLoadPayloadResponse(
    ::_pbi::ConstantInitialized)
  : action_result_(nullptr){}
struct WinchLoadPayloadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchLoadPayloadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchLoadPayloadResponseDefaultTypeInternal() {}
  union {
    WinchLoadPayloadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchLoadPayloadResponseDefaultTypeInternal _WinchLoadPayloadResponse_default_instance_;
PROTOBUF_CONSTEXPR WinchResult::WinchResult(
    ::_pbi::ConstantInitialized)
  : result_str_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , result_(0)
{}
struct WinchResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinchResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinchResultDefaultTypeInternal() {}
  union {
    WinchResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinchResultDefaultTypeInternal _WinchResult_default_instance_;
}  // namespace winch
}  // namespace rpc
}  // namespace mavsdk
static ::_pb::Metadata file_level_metadata_winch_2fwinch_2eproto[21];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_winch_2fwinch_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_winch_2fwinch_2eproto = nullptr;

const uint32_t TableStruct_winch_2fwinch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRelaxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRelaxRequest, instance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRelaxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRelaxResponse, action_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRelativeLengthControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRelativeLengthControlRequest, instance_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRelativeLengthControlRequest, length_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRelativeLengthControlRequest, rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRelativeLengthControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRelativeLengthControlResponse, action_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRateControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRateControlRequest, instance_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRateControlRequest, rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRateControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRateControlResponse, action_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchLockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchLockRequest, instance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchLockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchLockResponse, action_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchDeliverRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchDeliverRequest, instance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchDeliverResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchDeliverResponse, action_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchHoldRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchHoldRequest, instance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchHoldResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchHoldResponse, action_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRetractRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRetractRequest, instance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRetractResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchRetractResponse, action_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchLoadLineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchLoadLineRequest, instance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchLoadLineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchLoadLineResponse, action_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchAbandonLineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchAbandonLineRequest, instance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchAbandonLineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchAbandonLineResponse, action_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchLoadPayloadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchLoadPayloadRequest, instance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchLoadPayloadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchLoadPayloadResponse, action_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::winch::WinchResult, result_str_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mavsdk::rpc::winch::WinchRelaxRequest)},
  { 7, -1, -1, sizeof(::mavsdk::rpc::winch::WinchRelaxResponse)},
  { 14, -1, -1, sizeof(::mavsdk::rpc::winch::WinchRelativeLengthControlRequest)},
  { 23, -1, -1, sizeof(::mavsdk::rpc::winch::WinchRelativeLengthControlResponse)},
  { 30, -1, -1, sizeof(::mavsdk::rpc::winch::WinchRateControlRequest)},
  { 38, -1, -1, sizeof(::mavsdk::rpc::winch::WinchRateControlResponse)},
  { 45, -1, -1, sizeof(::mavsdk::rpc::winch::WinchLockRequest)},
  { 52, -1, -1, sizeof(::mavsdk::rpc::winch::WinchLockResponse)},
  { 59, -1, -1, sizeof(::mavsdk::rpc::winch::WinchDeliverRequest)},
  { 66, -1, -1, sizeof(::mavsdk::rpc::winch::WinchDeliverResponse)},
  { 73, -1, -1, sizeof(::mavsdk::rpc::winch::WinchHoldRequest)},
  { 80, -1, -1, sizeof(::mavsdk::rpc::winch::WinchHoldResponse)},
  { 87, -1, -1, sizeof(::mavsdk::rpc::winch::WinchRetractRequest)},
  { 94, -1, -1, sizeof(::mavsdk::rpc::winch::WinchRetractResponse)},
  { 101, -1, -1, sizeof(::mavsdk::rpc::winch::WinchLoadLineRequest)},
  { 108, -1, -1, sizeof(::mavsdk::rpc::winch::WinchLoadLineResponse)},
  { 115, -1, -1, sizeof(::mavsdk::rpc::winch::WinchAbandonLineRequest)},
  { 122, -1, -1, sizeof(::mavsdk::rpc::winch::WinchAbandonLineResponse)},
  { 129, -1, -1, sizeof(::mavsdk::rpc::winch::WinchLoadPayloadRequest)},
  { 136, -1, -1, sizeof(::mavsdk::rpc::winch::WinchLoadPayloadResponse)},
  { 143, -1, -1, sizeof(::mavsdk::rpc::winch::WinchResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mavsdk::rpc::winch::_WinchRelaxRequest_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchRelaxResponse_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchRelativeLengthControlRequest_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchRelativeLengthControlResponse_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchRateControlRequest_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchRateControlResponse_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchLockRequest_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchLockResponse_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchDeliverRequest_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchDeliverResponse_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchHoldRequest_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchHoldResponse_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchRetractRequest_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchRetractResponse_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchLoadLineRequest_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchLoadLineResponse_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchAbandonLineRequest_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchAbandonLineResponse_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchLoadPayloadRequest_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchLoadPayloadResponse_default_instance_._instance,
  &::mavsdk::rpc::winch::_WinchResult_default_instance_._instance,
};

const char descriptor_table_protodef_winch_2fwinch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021winch/winch.proto\022\020mavsdk.rpc.winch\"%\n"
  "\021WinchRelaxRequest\022\020\n\010instance\030\001 \001(\r\"J\n\022"
  "WinchRelaxResponse\0224\n\raction_result\030\001 \001("
  "\0132\035.mavsdk.rpc.winch.WinchResult\"S\n!Winc"
  "hRelativeLengthControlRequest\022\020\n\010instanc"
  "e\030\001 \001(\r\022\016\n\006length\030\002 \001(\002\022\014\n\004rate\030\003 \001(\002\"Z\n"
  "\"WinchRelativeLengthControlResponse\0224\n\ra"
  "ction_result\030\001 \001(\0132\035.mavsdk.rpc.winch.Wi"
  "nchResult\"9\n\027WinchRateControlRequest\022\020\n\010"
  "instance\030\001 \001(\r\022\014\n\004rate\030\002 \001(\002\"P\n\030WinchRat"
  "eControlResponse\0224\n\raction_result\030\001 \001(\0132"
  "\035.mavsdk.rpc.winch.WinchResult\"$\n\020WinchL"
  "ockRequest\022\020\n\010instance\030\001 \001(\r\"I\n\021WinchLoc"
  "kResponse\0224\n\raction_result\030\001 \001(\0132\035.mavsd"
  "k.rpc.winch.WinchResult\"\'\n\023WinchDeliverR"
  "equest\022\020\n\010instance\030\001 \001(\r\"L\n\024WinchDeliver"
  "Response\0224\n\raction_result\030\001 \001(\0132\035.mavsdk"
  ".rpc.winch.WinchResult\"$\n\020WinchHoldReque"
  "st\022\020\n\010instance\030\001 \001(\r\"I\n\021WinchHoldRespons"
  "e\0224\n\raction_result\030\001 \001(\0132\035.mavsdk.rpc.wi"
  "nch.WinchResult\"\'\n\023WinchRetractRequest\022\020"
  "\n\010instance\030\001 \001(\r\"L\n\024WinchRetractResponse"
  "\0224\n\raction_result\030\001 \001(\0132\035.mavsdk.rpc.win"
  "ch.WinchResult\"(\n\024WinchLoadLineRequest\022\020"
  "\n\010instance\030\001 \001(\r\"M\n\025WinchLoadLineRespons"
  "e\0224\n\raction_result\030\001 \001(\0132\035.mavsdk.rpc.wi"
  "nch.WinchResult\"+\n\027WinchAbandonLineReque"
  "st\022\020\n\010instance\030\001 \001(\r\"P\n\030WinchAbandonLine"
  "Response\0224\n\raction_result\030\001 \001(\0132\035.mavsdk"
  ".rpc.winch.WinchResult\"+\n\027WinchLoadPaylo"
  "adRequest\022\020\n\010instance\030\001 \001(\r\"P\n\030WinchLoad"
  "PayloadResponse\0224\n\raction_result\030\001 \001(\0132\035"
  ".mavsdk.rpc.winch.WinchResult\"\355\003\n\013WinchR"
  "esult\0224\n\006result\030\001 \001(\0162$.mavsdk.rpc.winch"
  ".WinchResult.Result\022\022\n\nresult_str\030\002 \001(\t\""
  "\223\003\n\006Result\022\022\n\016RESULT_UNKNOWN\020\000\022\022\n\016RESULT"
  "_SUCCESS\020\001\022\024\n\020RESULT_NO_SYSTEM\020\002\022\033\n\027RESU"
  "LT_CONNECTION_ERROR\020\003\022\017\n\013RESULT_BUSY\020\004\022\031"
  "\n\025RESULT_COMMAND_DENIED\020\005\022.\n*RESULT_COMM"
  "AND_DENIED_LANDED_STATE_UNKNOWN\020\006\022$\n RES"
  "ULT_COMMAND_DENIED_NOT_LANDED\020\007\022\022\n\016RESUL"
  "T_TIMEOUT\020\010\022*\n&RESULT_VTOL_TRANSITION_SU"
  "PPORT_UNKNOWN\020\t\022%\n!RESULT_NO_VTOL_TRANSI"
  "TION_SUPPORT\020\n\022\032\n\026RESULT_PARAMETER_ERROR"
  "\020\013\022\026\n\022RESULT_UNSUPPORTED\020\014\022\021\n\rRESULT_FAI"
  "LED\020\r*\254\002\n\013WinchAction\022\030\n\024WINCH_ACTION_RE"
  "LAXED\020\000\022(\n$WINCH_ACTION_RELATIVE_LENGTH_"
  "CONTROL\020\001\022\035\n\031WINCH_ACTION_RATE_CONTROL\020\002"
  "\022\025\n\021WINCH_ACTION_LOCK\020\003\022\030\n\024WINCH_ACTION_"
  "DELIVER\020\004\022\025\n\021WINCH_ACTION_HOLD\020\005\022\030\n\024WINC"
  "H_ACTION_RETRACT\020\006\022\032\n\026WINCH_ACTION_LOAD_"
  "LINE\020\007\022\035\n\031WINCH_ACTION_ABANDON_LINE\020\010\022\035\n"
  "\031WINCH_ACTION_LOAD_PAYLOAD\020\t2\222\010\n\014WinchSe"
  "rvice\022Y\n\nWinchRelax\022#.mavsdk.rpc.winch.W"
  "inchRelaxRequest\032$.mavsdk.rpc.winch.Winc"
  "hRelaxResponse\"\000\022\211\001\n\032WinchRelativeLength"
  "Control\0223.mavsdk.rpc.winch.WinchRelative"
  "LengthControlRequest\0324.mavsdk.rpc.winch."
  "WinchRelativeLengthControlResponse\"\000\022k\n\020"
  "WinchRateControl\022).mavsdk.rpc.winch.Winc"
  "hRateControlRequest\032*.mavsdk.rpc.winch.W"
  "inchRateControlResponse\"\000\022V\n\tWinchLock\022\""
  ".mavsdk.rpc.winch.WinchLockRequest\032#.mav"
  "sdk.rpc.winch.WinchLockResponse\"\000\022_\n\014Win"
  "chDeliver\022%.mavsdk.rpc.winch.WinchDelive"
  "rRequest\032&.mavsdk.rpc.winch.WinchDeliver"
  "Response\"\000\022V\n\tWinchHold\022\".mavsdk.rpc.win"
  "ch.WinchHoldRequest\032#.mavsdk.rpc.winch.W"
  "inchHoldResponse\"\000\022_\n\014WinchRetract\022%.mav"
  "sdk.rpc.winch.WinchRetractRequest\032&.mavs"
  "dk.rpc.winch.WinchRetractResponse\"\000\022b\n\rW"
  "inchLoadLine\022&.mavsdk.rpc.winch.WinchLoa"
  "dLineRequest\032\'.mavsdk.rpc.winch.WinchLoa"
  "dLineResponse\"\000\022k\n\020WinchAbandonLine\022).ma"
  "vsdk.rpc.winch.WinchAbandonLineRequest\032*"
  ".mavsdk.rpc.winch.WinchAbandonLineRespon"
  "se\"\000\022k\n\020WinchLoadPayload\022).mavsdk.rpc.wi"
  "nch.WinchLoadPayloadRequest\032*.mavsdk.rpc"
  ".winch.WinchLoadPayloadResponse\"\000B\035\n\017io."
  "mavsdk.winchB\nWinchProtob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_winch_2fwinch_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_winch_2fwinch_2eproto = {
    false, false, 3192, descriptor_table_protodef_winch_2fwinch_2eproto,
    "winch/winch.proto",
    &descriptor_table_winch_2fwinch_2eproto_once, nullptr, 0, 21,
    schemas, file_default_instances, TableStruct_winch_2fwinch_2eproto::offsets,
    file_level_metadata_winch_2fwinch_2eproto, file_level_enum_descriptors_winch_2fwinch_2eproto,
    file_level_service_descriptors_winch_2fwinch_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_winch_2fwinch_2eproto_getter() {
  return &descriptor_table_winch_2fwinch_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_winch_2fwinch_2eproto(&descriptor_table_winch_2fwinch_2eproto);
namespace mavsdk {
namespace rpc {
namespace winch {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WinchResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_winch_2fwinch_2eproto);
  return file_level_enum_descriptors_winch_2fwinch_2eproto[0];
}
bool WinchResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WinchResult_Result WinchResult::RESULT_UNKNOWN;
constexpr WinchResult_Result WinchResult::RESULT_SUCCESS;
constexpr WinchResult_Result WinchResult::RESULT_NO_SYSTEM;
constexpr WinchResult_Result WinchResult::RESULT_CONNECTION_ERROR;
constexpr WinchResult_Result WinchResult::RESULT_BUSY;
constexpr WinchResult_Result WinchResult::RESULT_COMMAND_DENIED;
constexpr WinchResult_Result WinchResult::RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN;
constexpr WinchResult_Result WinchResult::RESULT_COMMAND_DENIED_NOT_LANDED;
constexpr WinchResult_Result WinchResult::RESULT_TIMEOUT;
constexpr WinchResult_Result WinchResult::RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN;
constexpr WinchResult_Result WinchResult::RESULT_NO_VTOL_TRANSITION_SUPPORT;
constexpr WinchResult_Result WinchResult::RESULT_PARAMETER_ERROR;
constexpr WinchResult_Result WinchResult::RESULT_UNSUPPORTED;
constexpr WinchResult_Result WinchResult::RESULT_FAILED;
constexpr WinchResult_Result WinchResult::Result_MIN;
constexpr WinchResult_Result WinchResult::Result_MAX;
constexpr int WinchResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WinchAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_winch_2fwinch_2eproto);
  return file_level_enum_descriptors_winch_2fwinch_2eproto[1];
}
bool WinchAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class WinchRelaxRequest::_Internal {
 public:
};

WinchRelaxRequest::WinchRelaxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchRelaxRequest)
}
WinchRelaxRequest::WinchRelaxRequest(const WinchRelaxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instance_ = from.instance_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchRelaxRequest)
}

inline void WinchRelaxRequest::SharedCtor() {
instance_ = 0u;
}

WinchRelaxRequest::~WinchRelaxRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchRelaxRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchRelaxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WinchRelaxRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchRelaxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchRelaxRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchRelaxRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 instance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          instance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchRelaxRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchRelaxRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_instance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchRelaxRequest)
  return target;
}

size_t WinchRelaxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchRelaxRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_instance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchRelaxRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchRelaxRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchRelaxRequest::GetClassData() const { return &_class_data_; }

void WinchRelaxRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchRelaxRequest *>(to)->MergeFrom(
      static_cast<const WinchRelaxRequest &>(from));
}


void WinchRelaxRequest::MergeFrom(const WinchRelaxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchRelaxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_instance() != 0) {
    _internal_set_instance(from._internal_instance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchRelaxRequest::CopyFrom(const WinchRelaxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchRelaxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchRelaxRequest::IsInitialized() const {
  return true;
}

void WinchRelaxRequest::InternalSwap(WinchRelaxRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(instance_, other->instance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchRelaxRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[0]);
}

// ===================================================================

class WinchRelaxResponse::_Internal {
 public:
  static const ::mavsdk::rpc::winch::WinchResult& action_result(const WinchRelaxResponse* msg);
};

const ::mavsdk::rpc::winch::WinchResult&
WinchRelaxResponse::_Internal::action_result(const WinchRelaxResponse* msg) {
  return *msg->action_result_;
}
WinchRelaxResponse::WinchRelaxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchRelaxResponse)
}
WinchRelaxResponse::WinchRelaxResponse(const WinchRelaxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_result()) {
    action_result_ = new ::mavsdk::rpc::winch::WinchResult(*from.action_result_);
  } else {
    action_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchRelaxResponse)
}

inline void WinchRelaxResponse::SharedCtor() {
action_result_ = nullptr;
}

WinchRelaxResponse::~WinchRelaxResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchRelaxResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchRelaxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_result_;
}

void WinchRelaxResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchRelaxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchRelaxResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchRelaxResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.winch.WinchResult action_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchRelaxResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchRelaxResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_result(this),
        _Internal::action_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchRelaxResponse)
  return target;
}

size_t WinchRelaxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchRelaxResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchRelaxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchRelaxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchRelaxResponse::GetClassData() const { return &_class_data_; }

void WinchRelaxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchRelaxResponse *>(to)->MergeFrom(
      static_cast<const WinchRelaxResponse &>(from));
}


void WinchRelaxResponse::MergeFrom(const WinchRelaxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchRelaxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_result()) {
    _internal_mutable_action_result()->::mavsdk::rpc::winch::WinchResult::MergeFrom(from._internal_action_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchRelaxResponse::CopyFrom(const WinchRelaxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchRelaxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchRelaxResponse::IsInitialized() const {
  return true;
}

void WinchRelaxResponse::InternalSwap(WinchRelaxResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(action_result_, other->action_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchRelaxResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[1]);
}

// ===================================================================

class WinchRelativeLengthControlRequest::_Internal {
 public:
};

WinchRelativeLengthControlRequest::WinchRelativeLengthControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchRelativeLengthControlRequest)
}
WinchRelativeLengthControlRequest::WinchRelativeLengthControlRequest(const WinchRelativeLengthControlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&instance_, &from.instance_,
    static_cast<size_t>(reinterpret_cast<char*>(&rate_) -
    reinterpret_cast<char*>(&instance_)) + sizeof(rate_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchRelativeLengthControlRequest)
}

inline void WinchRelativeLengthControlRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&instance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rate_) -
    reinterpret_cast<char*>(&instance_)) + sizeof(rate_));
}

WinchRelativeLengthControlRequest::~WinchRelativeLengthControlRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchRelativeLengthControlRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchRelativeLengthControlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WinchRelativeLengthControlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchRelativeLengthControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchRelativeLengthControlRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&instance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rate_) -
      reinterpret_cast<char*>(&instance_)) + sizeof(rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchRelativeLengthControlRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 instance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          instance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchRelativeLengthControlRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchRelativeLengthControlRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_instance(), target);
  }

  // float length = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = this->_internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_length(), target);
  }

  // float rate = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rate = this->_internal_rate();
  uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchRelativeLengthControlRequest)
  return target;
}

size_t WinchRelativeLengthControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchRelativeLengthControlRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_instance());
  }

  // float length = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = this->_internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    total_size += 1 + 4;
  }

  // float rate = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rate = this->_internal_rate();
  uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchRelativeLengthControlRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchRelativeLengthControlRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchRelativeLengthControlRequest::GetClassData() const { return &_class_data_; }

void WinchRelativeLengthControlRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchRelativeLengthControlRequest *>(to)->MergeFrom(
      static_cast<const WinchRelativeLengthControlRequest &>(from));
}


void WinchRelativeLengthControlRequest::MergeFrom(const WinchRelativeLengthControlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchRelativeLengthControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_instance() != 0) {
    _internal_set_instance(from._internal_instance());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = from._internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    _internal_set_length(from._internal_length());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rate = from._internal_rate();
  uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    _internal_set_rate(from._internal_rate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchRelativeLengthControlRequest::CopyFrom(const WinchRelativeLengthControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchRelativeLengthControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchRelativeLengthControlRequest::IsInitialized() const {
  return true;
}

void WinchRelativeLengthControlRequest::InternalSwap(WinchRelativeLengthControlRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WinchRelativeLengthControlRequest, rate_)
      + sizeof(WinchRelativeLengthControlRequest::rate_)
      - PROTOBUF_FIELD_OFFSET(WinchRelativeLengthControlRequest, instance_)>(
          reinterpret_cast<char*>(&instance_),
          reinterpret_cast<char*>(&other->instance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchRelativeLengthControlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[2]);
}

// ===================================================================

class WinchRelativeLengthControlResponse::_Internal {
 public:
  static const ::mavsdk::rpc::winch::WinchResult& action_result(const WinchRelativeLengthControlResponse* msg);
};

const ::mavsdk::rpc::winch::WinchResult&
WinchRelativeLengthControlResponse::_Internal::action_result(const WinchRelativeLengthControlResponse* msg) {
  return *msg->action_result_;
}
WinchRelativeLengthControlResponse::WinchRelativeLengthControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchRelativeLengthControlResponse)
}
WinchRelativeLengthControlResponse::WinchRelativeLengthControlResponse(const WinchRelativeLengthControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_result()) {
    action_result_ = new ::mavsdk::rpc::winch::WinchResult(*from.action_result_);
  } else {
    action_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchRelativeLengthControlResponse)
}

inline void WinchRelativeLengthControlResponse::SharedCtor() {
action_result_ = nullptr;
}

WinchRelativeLengthControlResponse::~WinchRelativeLengthControlResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchRelativeLengthControlResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchRelativeLengthControlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_result_;
}

void WinchRelativeLengthControlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchRelativeLengthControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchRelativeLengthControlResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchRelativeLengthControlResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.winch.WinchResult action_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchRelativeLengthControlResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchRelativeLengthControlResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_result(this),
        _Internal::action_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchRelativeLengthControlResponse)
  return target;
}

size_t WinchRelativeLengthControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchRelativeLengthControlResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchRelativeLengthControlResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchRelativeLengthControlResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchRelativeLengthControlResponse::GetClassData() const { return &_class_data_; }

void WinchRelativeLengthControlResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchRelativeLengthControlResponse *>(to)->MergeFrom(
      static_cast<const WinchRelativeLengthControlResponse &>(from));
}


void WinchRelativeLengthControlResponse::MergeFrom(const WinchRelativeLengthControlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchRelativeLengthControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_result()) {
    _internal_mutable_action_result()->::mavsdk::rpc::winch::WinchResult::MergeFrom(from._internal_action_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchRelativeLengthControlResponse::CopyFrom(const WinchRelativeLengthControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchRelativeLengthControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchRelativeLengthControlResponse::IsInitialized() const {
  return true;
}

void WinchRelativeLengthControlResponse::InternalSwap(WinchRelativeLengthControlResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(action_result_, other->action_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchRelativeLengthControlResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[3]);
}

// ===================================================================

class WinchRateControlRequest::_Internal {
 public:
};

WinchRateControlRequest::WinchRateControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchRateControlRequest)
}
WinchRateControlRequest::WinchRateControlRequest(const WinchRateControlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&instance_, &from.instance_,
    static_cast<size_t>(reinterpret_cast<char*>(&rate_) -
    reinterpret_cast<char*>(&instance_)) + sizeof(rate_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchRateControlRequest)
}

inline void WinchRateControlRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&instance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rate_) -
    reinterpret_cast<char*>(&instance_)) + sizeof(rate_));
}

WinchRateControlRequest::~WinchRateControlRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchRateControlRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchRateControlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WinchRateControlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchRateControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchRateControlRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&instance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rate_) -
      reinterpret_cast<char*>(&instance_)) + sizeof(rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchRateControlRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 instance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          instance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchRateControlRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchRateControlRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_instance(), target);
  }

  // float rate = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rate = this->_internal_rate();
  uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchRateControlRequest)
  return target;
}

size_t WinchRateControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchRateControlRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_instance());
  }

  // float rate = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rate = this->_internal_rate();
  uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchRateControlRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchRateControlRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchRateControlRequest::GetClassData() const { return &_class_data_; }

void WinchRateControlRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchRateControlRequest *>(to)->MergeFrom(
      static_cast<const WinchRateControlRequest &>(from));
}


void WinchRateControlRequest::MergeFrom(const WinchRateControlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchRateControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_instance() != 0) {
    _internal_set_instance(from._internal_instance());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rate = from._internal_rate();
  uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    _internal_set_rate(from._internal_rate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchRateControlRequest::CopyFrom(const WinchRateControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchRateControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchRateControlRequest::IsInitialized() const {
  return true;
}

void WinchRateControlRequest::InternalSwap(WinchRateControlRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WinchRateControlRequest, rate_)
      + sizeof(WinchRateControlRequest::rate_)
      - PROTOBUF_FIELD_OFFSET(WinchRateControlRequest, instance_)>(
          reinterpret_cast<char*>(&instance_),
          reinterpret_cast<char*>(&other->instance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchRateControlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[4]);
}

// ===================================================================

class WinchRateControlResponse::_Internal {
 public:
  static const ::mavsdk::rpc::winch::WinchResult& action_result(const WinchRateControlResponse* msg);
};

const ::mavsdk::rpc::winch::WinchResult&
WinchRateControlResponse::_Internal::action_result(const WinchRateControlResponse* msg) {
  return *msg->action_result_;
}
WinchRateControlResponse::WinchRateControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchRateControlResponse)
}
WinchRateControlResponse::WinchRateControlResponse(const WinchRateControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_result()) {
    action_result_ = new ::mavsdk::rpc::winch::WinchResult(*from.action_result_);
  } else {
    action_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchRateControlResponse)
}

inline void WinchRateControlResponse::SharedCtor() {
action_result_ = nullptr;
}

WinchRateControlResponse::~WinchRateControlResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchRateControlResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchRateControlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_result_;
}

void WinchRateControlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchRateControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchRateControlResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchRateControlResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.winch.WinchResult action_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchRateControlResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchRateControlResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_result(this),
        _Internal::action_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchRateControlResponse)
  return target;
}

size_t WinchRateControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchRateControlResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchRateControlResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchRateControlResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchRateControlResponse::GetClassData() const { return &_class_data_; }

void WinchRateControlResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchRateControlResponse *>(to)->MergeFrom(
      static_cast<const WinchRateControlResponse &>(from));
}


void WinchRateControlResponse::MergeFrom(const WinchRateControlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchRateControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_result()) {
    _internal_mutable_action_result()->::mavsdk::rpc::winch::WinchResult::MergeFrom(from._internal_action_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchRateControlResponse::CopyFrom(const WinchRateControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchRateControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchRateControlResponse::IsInitialized() const {
  return true;
}

void WinchRateControlResponse::InternalSwap(WinchRateControlResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(action_result_, other->action_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchRateControlResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[5]);
}

// ===================================================================

class WinchLockRequest::_Internal {
 public:
};

WinchLockRequest::WinchLockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchLockRequest)
}
WinchLockRequest::WinchLockRequest(const WinchLockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instance_ = from.instance_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchLockRequest)
}

inline void WinchLockRequest::SharedCtor() {
instance_ = 0u;
}

WinchLockRequest::~WinchLockRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchLockRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchLockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WinchLockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchLockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchLockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchLockRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 instance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          instance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchLockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchLockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_instance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchLockRequest)
  return target;
}

size_t WinchLockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchLockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_instance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchLockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchLockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchLockRequest::GetClassData() const { return &_class_data_; }

void WinchLockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchLockRequest *>(to)->MergeFrom(
      static_cast<const WinchLockRequest &>(from));
}


void WinchLockRequest::MergeFrom(const WinchLockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_instance() != 0) {
    _internal_set_instance(from._internal_instance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchLockRequest::CopyFrom(const WinchLockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchLockRequest::IsInitialized() const {
  return true;
}

void WinchLockRequest::InternalSwap(WinchLockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(instance_, other->instance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchLockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[6]);
}

// ===================================================================

class WinchLockResponse::_Internal {
 public:
  static const ::mavsdk::rpc::winch::WinchResult& action_result(const WinchLockResponse* msg);
};

const ::mavsdk::rpc::winch::WinchResult&
WinchLockResponse::_Internal::action_result(const WinchLockResponse* msg) {
  return *msg->action_result_;
}
WinchLockResponse::WinchLockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchLockResponse)
}
WinchLockResponse::WinchLockResponse(const WinchLockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_result()) {
    action_result_ = new ::mavsdk::rpc::winch::WinchResult(*from.action_result_);
  } else {
    action_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchLockResponse)
}

inline void WinchLockResponse::SharedCtor() {
action_result_ = nullptr;
}

WinchLockResponse::~WinchLockResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchLockResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchLockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_result_;
}

void WinchLockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchLockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchLockResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchLockResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.winch.WinchResult action_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchLockResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchLockResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_result(this),
        _Internal::action_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchLockResponse)
  return target;
}

size_t WinchLockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchLockResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchLockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchLockResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchLockResponse::GetClassData() const { return &_class_data_; }

void WinchLockResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchLockResponse *>(to)->MergeFrom(
      static_cast<const WinchLockResponse &>(from));
}


void WinchLockResponse::MergeFrom(const WinchLockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchLockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_result()) {
    _internal_mutable_action_result()->::mavsdk::rpc::winch::WinchResult::MergeFrom(from._internal_action_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchLockResponse::CopyFrom(const WinchLockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchLockResponse::IsInitialized() const {
  return true;
}

void WinchLockResponse::InternalSwap(WinchLockResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(action_result_, other->action_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchLockResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[7]);
}

// ===================================================================

class WinchDeliverRequest::_Internal {
 public:
};

WinchDeliverRequest::WinchDeliverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchDeliverRequest)
}
WinchDeliverRequest::WinchDeliverRequest(const WinchDeliverRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instance_ = from.instance_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchDeliverRequest)
}

inline void WinchDeliverRequest::SharedCtor() {
instance_ = 0u;
}

WinchDeliverRequest::~WinchDeliverRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchDeliverRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchDeliverRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WinchDeliverRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchDeliverRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchDeliverRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchDeliverRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 instance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          instance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchDeliverRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchDeliverRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_instance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchDeliverRequest)
  return target;
}

size_t WinchDeliverRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchDeliverRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_instance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchDeliverRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchDeliverRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchDeliverRequest::GetClassData() const { return &_class_data_; }

void WinchDeliverRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchDeliverRequest *>(to)->MergeFrom(
      static_cast<const WinchDeliverRequest &>(from));
}


void WinchDeliverRequest::MergeFrom(const WinchDeliverRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchDeliverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_instance() != 0) {
    _internal_set_instance(from._internal_instance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchDeliverRequest::CopyFrom(const WinchDeliverRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchDeliverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchDeliverRequest::IsInitialized() const {
  return true;
}

void WinchDeliverRequest::InternalSwap(WinchDeliverRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(instance_, other->instance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchDeliverRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[8]);
}

// ===================================================================

class WinchDeliverResponse::_Internal {
 public:
  static const ::mavsdk::rpc::winch::WinchResult& action_result(const WinchDeliverResponse* msg);
};

const ::mavsdk::rpc::winch::WinchResult&
WinchDeliverResponse::_Internal::action_result(const WinchDeliverResponse* msg) {
  return *msg->action_result_;
}
WinchDeliverResponse::WinchDeliverResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchDeliverResponse)
}
WinchDeliverResponse::WinchDeliverResponse(const WinchDeliverResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_result()) {
    action_result_ = new ::mavsdk::rpc::winch::WinchResult(*from.action_result_);
  } else {
    action_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchDeliverResponse)
}

inline void WinchDeliverResponse::SharedCtor() {
action_result_ = nullptr;
}

WinchDeliverResponse::~WinchDeliverResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchDeliverResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchDeliverResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_result_;
}

void WinchDeliverResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchDeliverResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchDeliverResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchDeliverResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.winch.WinchResult action_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchDeliverResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchDeliverResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_result(this),
        _Internal::action_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchDeliverResponse)
  return target;
}

size_t WinchDeliverResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchDeliverResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchDeliverResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchDeliverResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchDeliverResponse::GetClassData() const { return &_class_data_; }

void WinchDeliverResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchDeliverResponse *>(to)->MergeFrom(
      static_cast<const WinchDeliverResponse &>(from));
}


void WinchDeliverResponse::MergeFrom(const WinchDeliverResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchDeliverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_result()) {
    _internal_mutable_action_result()->::mavsdk::rpc::winch::WinchResult::MergeFrom(from._internal_action_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchDeliverResponse::CopyFrom(const WinchDeliverResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchDeliverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchDeliverResponse::IsInitialized() const {
  return true;
}

void WinchDeliverResponse::InternalSwap(WinchDeliverResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(action_result_, other->action_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchDeliverResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[9]);
}

// ===================================================================

class WinchHoldRequest::_Internal {
 public:
};

WinchHoldRequest::WinchHoldRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchHoldRequest)
}
WinchHoldRequest::WinchHoldRequest(const WinchHoldRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instance_ = from.instance_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchHoldRequest)
}

inline void WinchHoldRequest::SharedCtor() {
instance_ = 0u;
}

WinchHoldRequest::~WinchHoldRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchHoldRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchHoldRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WinchHoldRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchHoldRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchHoldRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchHoldRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 instance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          instance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchHoldRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchHoldRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_instance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchHoldRequest)
  return target;
}

size_t WinchHoldRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchHoldRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_instance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchHoldRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchHoldRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchHoldRequest::GetClassData() const { return &_class_data_; }

void WinchHoldRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchHoldRequest *>(to)->MergeFrom(
      static_cast<const WinchHoldRequest &>(from));
}


void WinchHoldRequest::MergeFrom(const WinchHoldRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchHoldRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_instance() != 0) {
    _internal_set_instance(from._internal_instance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchHoldRequest::CopyFrom(const WinchHoldRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchHoldRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchHoldRequest::IsInitialized() const {
  return true;
}

void WinchHoldRequest::InternalSwap(WinchHoldRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(instance_, other->instance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchHoldRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[10]);
}

// ===================================================================

class WinchHoldResponse::_Internal {
 public:
  static const ::mavsdk::rpc::winch::WinchResult& action_result(const WinchHoldResponse* msg);
};

const ::mavsdk::rpc::winch::WinchResult&
WinchHoldResponse::_Internal::action_result(const WinchHoldResponse* msg) {
  return *msg->action_result_;
}
WinchHoldResponse::WinchHoldResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchHoldResponse)
}
WinchHoldResponse::WinchHoldResponse(const WinchHoldResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_result()) {
    action_result_ = new ::mavsdk::rpc::winch::WinchResult(*from.action_result_);
  } else {
    action_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchHoldResponse)
}

inline void WinchHoldResponse::SharedCtor() {
action_result_ = nullptr;
}

WinchHoldResponse::~WinchHoldResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchHoldResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchHoldResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_result_;
}

void WinchHoldResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchHoldResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchHoldResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchHoldResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.winch.WinchResult action_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchHoldResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchHoldResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_result(this),
        _Internal::action_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchHoldResponse)
  return target;
}

size_t WinchHoldResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchHoldResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchHoldResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchHoldResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchHoldResponse::GetClassData() const { return &_class_data_; }

void WinchHoldResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchHoldResponse *>(to)->MergeFrom(
      static_cast<const WinchHoldResponse &>(from));
}


void WinchHoldResponse::MergeFrom(const WinchHoldResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchHoldResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_result()) {
    _internal_mutable_action_result()->::mavsdk::rpc::winch::WinchResult::MergeFrom(from._internal_action_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchHoldResponse::CopyFrom(const WinchHoldResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchHoldResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchHoldResponse::IsInitialized() const {
  return true;
}

void WinchHoldResponse::InternalSwap(WinchHoldResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(action_result_, other->action_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchHoldResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[11]);
}

// ===================================================================

class WinchRetractRequest::_Internal {
 public:
};

WinchRetractRequest::WinchRetractRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchRetractRequest)
}
WinchRetractRequest::WinchRetractRequest(const WinchRetractRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instance_ = from.instance_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchRetractRequest)
}

inline void WinchRetractRequest::SharedCtor() {
instance_ = 0u;
}

WinchRetractRequest::~WinchRetractRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchRetractRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchRetractRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WinchRetractRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchRetractRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchRetractRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchRetractRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 instance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          instance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchRetractRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchRetractRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_instance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchRetractRequest)
  return target;
}

size_t WinchRetractRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchRetractRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_instance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchRetractRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchRetractRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchRetractRequest::GetClassData() const { return &_class_data_; }

void WinchRetractRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchRetractRequest *>(to)->MergeFrom(
      static_cast<const WinchRetractRequest &>(from));
}


void WinchRetractRequest::MergeFrom(const WinchRetractRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchRetractRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_instance() != 0) {
    _internal_set_instance(from._internal_instance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchRetractRequest::CopyFrom(const WinchRetractRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchRetractRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchRetractRequest::IsInitialized() const {
  return true;
}

void WinchRetractRequest::InternalSwap(WinchRetractRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(instance_, other->instance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchRetractRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[12]);
}

// ===================================================================

class WinchRetractResponse::_Internal {
 public:
  static const ::mavsdk::rpc::winch::WinchResult& action_result(const WinchRetractResponse* msg);
};

const ::mavsdk::rpc::winch::WinchResult&
WinchRetractResponse::_Internal::action_result(const WinchRetractResponse* msg) {
  return *msg->action_result_;
}
WinchRetractResponse::WinchRetractResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchRetractResponse)
}
WinchRetractResponse::WinchRetractResponse(const WinchRetractResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_result()) {
    action_result_ = new ::mavsdk::rpc::winch::WinchResult(*from.action_result_);
  } else {
    action_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchRetractResponse)
}

inline void WinchRetractResponse::SharedCtor() {
action_result_ = nullptr;
}

WinchRetractResponse::~WinchRetractResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchRetractResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchRetractResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_result_;
}

void WinchRetractResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchRetractResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchRetractResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchRetractResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.winch.WinchResult action_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchRetractResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchRetractResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_result(this),
        _Internal::action_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchRetractResponse)
  return target;
}

size_t WinchRetractResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchRetractResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchRetractResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchRetractResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchRetractResponse::GetClassData() const { return &_class_data_; }

void WinchRetractResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchRetractResponse *>(to)->MergeFrom(
      static_cast<const WinchRetractResponse &>(from));
}


void WinchRetractResponse::MergeFrom(const WinchRetractResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchRetractResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_result()) {
    _internal_mutable_action_result()->::mavsdk::rpc::winch::WinchResult::MergeFrom(from._internal_action_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchRetractResponse::CopyFrom(const WinchRetractResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchRetractResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchRetractResponse::IsInitialized() const {
  return true;
}

void WinchRetractResponse::InternalSwap(WinchRetractResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(action_result_, other->action_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchRetractResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[13]);
}

// ===================================================================

class WinchLoadLineRequest::_Internal {
 public:
};

WinchLoadLineRequest::WinchLoadLineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchLoadLineRequest)
}
WinchLoadLineRequest::WinchLoadLineRequest(const WinchLoadLineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instance_ = from.instance_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchLoadLineRequest)
}

inline void WinchLoadLineRequest::SharedCtor() {
instance_ = 0u;
}

WinchLoadLineRequest::~WinchLoadLineRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchLoadLineRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchLoadLineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WinchLoadLineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchLoadLineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchLoadLineRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchLoadLineRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 instance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          instance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchLoadLineRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchLoadLineRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_instance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchLoadLineRequest)
  return target;
}

size_t WinchLoadLineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchLoadLineRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_instance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchLoadLineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchLoadLineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchLoadLineRequest::GetClassData() const { return &_class_data_; }

void WinchLoadLineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchLoadLineRequest *>(to)->MergeFrom(
      static_cast<const WinchLoadLineRequest &>(from));
}


void WinchLoadLineRequest::MergeFrom(const WinchLoadLineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchLoadLineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_instance() != 0) {
    _internal_set_instance(from._internal_instance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchLoadLineRequest::CopyFrom(const WinchLoadLineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchLoadLineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchLoadLineRequest::IsInitialized() const {
  return true;
}

void WinchLoadLineRequest::InternalSwap(WinchLoadLineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(instance_, other->instance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchLoadLineRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[14]);
}

// ===================================================================

class WinchLoadLineResponse::_Internal {
 public:
  static const ::mavsdk::rpc::winch::WinchResult& action_result(const WinchLoadLineResponse* msg);
};

const ::mavsdk::rpc::winch::WinchResult&
WinchLoadLineResponse::_Internal::action_result(const WinchLoadLineResponse* msg) {
  return *msg->action_result_;
}
WinchLoadLineResponse::WinchLoadLineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchLoadLineResponse)
}
WinchLoadLineResponse::WinchLoadLineResponse(const WinchLoadLineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_result()) {
    action_result_ = new ::mavsdk::rpc::winch::WinchResult(*from.action_result_);
  } else {
    action_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchLoadLineResponse)
}

inline void WinchLoadLineResponse::SharedCtor() {
action_result_ = nullptr;
}

WinchLoadLineResponse::~WinchLoadLineResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchLoadLineResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchLoadLineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_result_;
}

void WinchLoadLineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchLoadLineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchLoadLineResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchLoadLineResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.winch.WinchResult action_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchLoadLineResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchLoadLineResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_result(this),
        _Internal::action_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchLoadLineResponse)
  return target;
}

size_t WinchLoadLineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchLoadLineResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchLoadLineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchLoadLineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchLoadLineResponse::GetClassData() const { return &_class_data_; }

void WinchLoadLineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchLoadLineResponse *>(to)->MergeFrom(
      static_cast<const WinchLoadLineResponse &>(from));
}


void WinchLoadLineResponse::MergeFrom(const WinchLoadLineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchLoadLineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_result()) {
    _internal_mutable_action_result()->::mavsdk::rpc::winch::WinchResult::MergeFrom(from._internal_action_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchLoadLineResponse::CopyFrom(const WinchLoadLineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchLoadLineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchLoadLineResponse::IsInitialized() const {
  return true;
}

void WinchLoadLineResponse::InternalSwap(WinchLoadLineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(action_result_, other->action_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchLoadLineResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[15]);
}

// ===================================================================

class WinchAbandonLineRequest::_Internal {
 public:
};

WinchAbandonLineRequest::WinchAbandonLineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchAbandonLineRequest)
}
WinchAbandonLineRequest::WinchAbandonLineRequest(const WinchAbandonLineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instance_ = from.instance_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchAbandonLineRequest)
}

inline void WinchAbandonLineRequest::SharedCtor() {
instance_ = 0u;
}

WinchAbandonLineRequest::~WinchAbandonLineRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchAbandonLineRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchAbandonLineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WinchAbandonLineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchAbandonLineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchAbandonLineRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchAbandonLineRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 instance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          instance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchAbandonLineRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchAbandonLineRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_instance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchAbandonLineRequest)
  return target;
}

size_t WinchAbandonLineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchAbandonLineRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_instance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchAbandonLineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchAbandonLineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchAbandonLineRequest::GetClassData() const { return &_class_data_; }

void WinchAbandonLineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchAbandonLineRequest *>(to)->MergeFrom(
      static_cast<const WinchAbandonLineRequest &>(from));
}


void WinchAbandonLineRequest::MergeFrom(const WinchAbandonLineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchAbandonLineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_instance() != 0) {
    _internal_set_instance(from._internal_instance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchAbandonLineRequest::CopyFrom(const WinchAbandonLineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchAbandonLineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchAbandonLineRequest::IsInitialized() const {
  return true;
}

void WinchAbandonLineRequest::InternalSwap(WinchAbandonLineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(instance_, other->instance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchAbandonLineRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[16]);
}

// ===================================================================

class WinchAbandonLineResponse::_Internal {
 public:
  static const ::mavsdk::rpc::winch::WinchResult& action_result(const WinchAbandonLineResponse* msg);
};

const ::mavsdk::rpc::winch::WinchResult&
WinchAbandonLineResponse::_Internal::action_result(const WinchAbandonLineResponse* msg) {
  return *msg->action_result_;
}
WinchAbandonLineResponse::WinchAbandonLineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchAbandonLineResponse)
}
WinchAbandonLineResponse::WinchAbandonLineResponse(const WinchAbandonLineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_result()) {
    action_result_ = new ::mavsdk::rpc::winch::WinchResult(*from.action_result_);
  } else {
    action_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchAbandonLineResponse)
}

inline void WinchAbandonLineResponse::SharedCtor() {
action_result_ = nullptr;
}

WinchAbandonLineResponse::~WinchAbandonLineResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchAbandonLineResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchAbandonLineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_result_;
}

void WinchAbandonLineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchAbandonLineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchAbandonLineResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchAbandonLineResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.winch.WinchResult action_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchAbandonLineResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchAbandonLineResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_result(this),
        _Internal::action_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchAbandonLineResponse)
  return target;
}

size_t WinchAbandonLineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchAbandonLineResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchAbandonLineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchAbandonLineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchAbandonLineResponse::GetClassData() const { return &_class_data_; }

void WinchAbandonLineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchAbandonLineResponse *>(to)->MergeFrom(
      static_cast<const WinchAbandonLineResponse &>(from));
}


void WinchAbandonLineResponse::MergeFrom(const WinchAbandonLineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchAbandonLineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_result()) {
    _internal_mutable_action_result()->::mavsdk::rpc::winch::WinchResult::MergeFrom(from._internal_action_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchAbandonLineResponse::CopyFrom(const WinchAbandonLineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchAbandonLineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchAbandonLineResponse::IsInitialized() const {
  return true;
}

void WinchAbandonLineResponse::InternalSwap(WinchAbandonLineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(action_result_, other->action_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchAbandonLineResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[17]);
}

// ===================================================================

class WinchLoadPayloadRequest::_Internal {
 public:
};

WinchLoadPayloadRequest::WinchLoadPayloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchLoadPayloadRequest)
}
WinchLoadPayloadRequest::WinchLoadPayloadRequest(const WinchLoadPayloadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instance_ = from.instance_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchLoadPayloadRequest)
}

inline void WinchLoadPayloadRequest::SharedCtor() {
instance_ = 0u;
}

WinchLoadPayloadRequest::~WinchLoadPayloadRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchLoadPayloadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchLoadPayloadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WinchLoadPayloadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchLoadPayloadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchLoadPayloadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchLoadPayloadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 instance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          instance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchLoadPayloadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchLoadPayloadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_instance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchLoadPayloadRequest)
  return target;
}

size_t WinchLoadPayloadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchLoadPayloadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 instance = 1;
  if (this->_internal_instance() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_instance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchLoadPayloadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchLoadPayloadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchLoadPayloadRequest::GetClassData() const { return &_class_data_; }

void WinchLoadPayloadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchLoadPayloadRequest *>(to)->MergeFrom(
      static_cast<const WinchLoadPayloadRequest &>(from));
}


void WinchLoadPayloadRequest::MergeFrom(const WinchLoadPayloadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchLoadPayloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_instance() != 0) {
    _internal_set_instance(from._internal_instance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchLoadPayloadRequest::CopyFrom(const WinchLoadPayloadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchLoadPayloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchLoadPayloadRequest::IsInitialized() const {
  return true;
}

void WinchLoadPayloadRequest::InternalSwap(WinchLoadPayloadRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(instance_, other->instance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchLoadPayloadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[18]);
}

// ===================================================================

class WinchLoadPayloadResponse::_Internal {
 public:
  static const ::mavsdk::rpc::winch::WinchResult& action_result(const WinchLoadPayloadResponse* msg);
};

const ::mavsdk::rpc::winch::WinchResult&
WinchLoadPayloadResponse::_Internal::action_result(const WinchLoadPayloadResponse* msg) {
  return *msg->action_result_;
}
WinchLoadPayloadResponse::WinchLoadPayloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchLoadPayloadResponse)
}
WinchLoadPayloadResponse::WinchLoadPayloadResponse(const WinchLoadPayloadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_result()) {
    action_result_ = new ::mavsdk::rpc::winch::WinchResult(*from.action_result_);
  } else {
    action_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchLoadPayloadResponse)
}

inline void WinchLoadPayloadResponse::SharedCtor() {
action_result_ = nullptr;
}

WinchLoadPayloadResponse::~WinchLoadPayloadResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchLoadPayloadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchLoadPayloadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_result_;
}

void WinchLoadPayloadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchLoadPayloadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchLoadPayloadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchLoadPayloadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.winch.WinchResult action_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchLoadPayloadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchLoadPayloadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_result(this),
        _Internal::action_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchLoadPayloadResponse)
  return target;
}

size_t WinchLoadPayloadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchLoadPayloadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  if (this->_internal_has_action_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchLoadPayloadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchLoadPayloadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchLoadPayloadResponse::GetClassData() const { return &_class_data_; }

void WinchLoadPayloadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchLoadPayloadResponse *>(to)->MergeFrom(
      static_cast<const WinchLoadPayloadResponse &>(from));
}


void WinchLoadPayloadResponse::MergeFrom(const WinchLoadPayloadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchLoadPayloadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_result()) {
    _internal_mutable_action_result()->::mavsdk::rpc::winch::WinchResult::MergeFrom(from._internal_action_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchLoadPayloadResponse::CopyFrom(const WinchLoadPayloadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchLoadPayloadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchLoadPayloadResponse::IsInitialized() const {
  return true;
}

void WinchLoadPayloadResponse::InternalSwap(WinchLoadPayloadResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(action_result_, other->action_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchLoadPayloadResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[19]);
}

// ===================================================================

class WinchResult::_Internal {
 public:
};

WinchResult::WinchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.winch.WinchResult)
}
WinchResult::WinchResult(const WinchResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    result_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result_str().empty()) {
    result_str_.Set(from._internal_result_str(), 
      GetArenaForAllocation());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.winch.WinchResult)
}

inline void WinchResult::SharedCtor() {
result_str_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  result_str_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
result_ = 0;
}

WinchResult::~WinchResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.winch.WinchResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WinchResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_str_.Destroy();
}

void WinchResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WinchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.winch.WinchResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmpty();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinchResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.winch.WinchResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::winch::WinchResult_Result>(val));
        } else
          goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.winch.WinchResult.result_str"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WinchResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.winch.WinchResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.winch.WinchResult.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.winch.WinchResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.winch.WinchResult)
  return target;
}

size_t WinchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.winch.WinchResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.winch.WinchResult.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WinchResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WinchResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WinchResult::GetClassData() const { return &_class_data_; }

void WinchResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WinchResult *>(to)->MergeFrom(
      static_cast<const WinchResult &>(from));
}


void WinchResult::MergeFrom(const WinchResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.winch.WinchResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WinchResult::CopyFrom(const WinchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.winch.WinchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinchResult::IsInitialized() const {
  return true;
}

void WinchResult::InternalSwap(WinchResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &result_str_, lhs_arena,
      &other->result_str_, rhs_arena
  );
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WinchResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_winch_2fwinch_2eproto_getter, &descriptor_table_winch_2fwinch_2eproto_once,
      file_level_metadata_winch_2fwinch_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace winch
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchRelaxRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchRelaxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchRelaxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchRelaxResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchRelaxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchRelaxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchRelativeLengthControlRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchRelativeLengthControlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchRelativeLengthControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchRelativeLengthControlResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchRelativeLengthControlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchRelativeLengthControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchRateControlRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchRateControlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchRateControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchRateControlResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchRateControlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchRateControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchLockRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchLockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchLockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchLockResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchLockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchLockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchDeliverRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchDeliverRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchDeliverRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchDeliverResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchDeliverResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchDeliverResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchHoldRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchHoldRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchHoldRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchHoldResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchHoldResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchHoldResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchRetractRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchRetractRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchRetractRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchRetractResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchRetractResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchRetractResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchLoadLineRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchLoadLineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchLoadLineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchLoadLineResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchLoadLineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchLoadLineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchAbandonLineRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchAbandonLineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchAbandonLineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchAbandonLineResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchAbandonLineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchAbandonLineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchLoadPayloadRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchLoadPayloadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchLoadPayloadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchLoadPayloadResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchLoadPayloadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchLoadPayloadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::winch::WinchResult*
Arena::CreateMaybeMessage< ::mavsdk::rpc::winch::WinchResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::winch::WinchResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
