// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: winch/winch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_winch_2fwinch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_winch_2fwinch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_winch_2fwinch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_winch_2fwinch_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_winch_2fwinch_2eproto;
namespace mavsdk {
namespace rpc {
namespace winch {
class AbandonLineRequest;
struct AbandonLineRequestDefaultTypeInternal;
extern AbandonLineRequestDefaultTypeInternal _AbandonLineRequest_default_instance_;
class AbandonLineResponse;
struct AbandonLineResponseDefaultTypeInternal;
extern AbandonLineResponseDefaultTypeInternal _AbandonLineResponse_default_instance_;
class DeliverRequest;
struct DeliverRequestDefaultTypeInternal;
extern DeliverRequestDefaultTypeInternal _DeliverRequest_default_instance_;
class DeliverResponse;
struct DeliverResponseDefaultTypeInternal;
extern DeliverResponseDefaultTypeInternal _DeliverResponse_default_instance_;
class HoldRequest;
struct HoldRequestDefaultTypeInternal;
extern HoldRequestDefaultTypeInternal _HoldRequest_default_instance_;
class HoldResponse;
struct HoldResponseDefaultTypeInternal;
extern HoldResponseDefaultTypeInternal _HoldResponse_default_instance_;
class LoadLineRequest;
struct LoadLineRequestDefaultTypeInternal;
extern LoadLineRequestDefaultTypeInternal _LoadLineRequest_default_instance_;
class LoadLineResponse;
struct LoadLineResponseDefaultTypeInternal;
extern LoadLineResponseDefaultTypeInternal _LoadLineResponse_default_instance_;
class LoadPayloadRequest;
struct LoadPayloadRequestDefaultTypeInternal;
extern LoadPayloadRequestDefaultTypeInternal _LoadPayloadRequest_default_instance_;
class LoadPayloadResponse;
struct LoadPayloadResponseDefaultTypeInternal;
extern LoadPayloadResponseDefaultTypeInternal _LoadPayloadResponse_default_instance_;
class LockRequest;
struct LockRequestDefaultTypeInternal;
extern LockRequestDefaultTypeInternal _LockRequest_default_instance_;
class LockResponse;
struct LockResponseDefaultTypeInternal;
extern LockResponseDefaultTypeInternal _LockResponse_default_instance_;
class RateControlRequest;
struct RateControlRequestDefaultTypeInternal;
extern RateControlRequestDefaultTypeInternal _RateControlRequest_default_instance_;
class RateControlResponse;
struct RateControlResponseDefaultTypeInternal;
extern RateControlResponseDefaultTypeInternal _RateControlResponse_default_instance_;
class RelativeLengthControlRequest;
struct RelativeLengthControlRequestDefaultTypeInternal;
extern RelativeLengthControlRequestDefaultTypeInternal _RelativeLengthControlRequest_default_instance_;
class RelativeLengthControlResponse;
struct RelativeLengthControlResponseDefaultTypeInternal;
extern RelativeLengthControlResponseDefaultTypeInternal _RelativeLengthControlResponse_default_instance_;
class RelaxRequest;
struct RelaxRequestDefaultTypeInternal;
extern RelaxRequestDefaultTypeInternal _RelaxRequest_default_instance_;
class RelaxResponse;
struct RelaxResponseDefaultTypeInternal;
extern RelaxResponseDefaultTypeInternal _RelaxResponse_default_instance_;
class RetractRequest;
struct RetractRequestDefaultTypeInternal;
extern RetractRequestDefaultTypeInternal _RetractRequest_default_instance_;
class RetractResponse;
struct RetractResponseDefaultTypeInternal;
extern RetractResponseDefaultTypeInternal _RetractResponse_default_instance_;
class WinchResult;
struct WinchResultDefaultTypeInternal;
extern WinchResultDefaultTypeInternal _WinchResult_default_instance_;
}  // namespace winch
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::winch::AbandonLineRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::AbandonLineRequest>(Arena*);
template<> ::mavsdk::rpc::winch::AbandonLineResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::AbandonLineResponse>(Arena*);
template<> ::mavsdk::rpc::winch::DeliverRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::DeliverRequest>(Arena*);
template<> ::mavsdk::rpc::winch::DeliverResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::DeliverResponse>(Arena*);
template<> ::mavsdk::rpc::winch::HoldRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::HoldRequest>(Arena*);
template<> ::mavsdk::rpc::winch::HoldResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::HoldResponse>(Arena*);
template<> ::mavsdk::rpc::winch::LoadLineRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::LoadLineRequest>(Arena*);
template<> ::mavsdk::rpc::winch::LoadLineResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::LoadLineResponse>(Arena*);
template<> ::mavsdk::rpc::winch::LoadPayloadRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::LoadPayloadRequest>(Arena*);
template<> ::mavsdk::rpc::winch::LoadPayloadResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::LoadPayloadResponse>(Arena*);
template<> ::mavsdk::rpc::winch::LockRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::LockRequest>(Arena*);
template<> ::mavsdk::rpc::winch::LockResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::LockResponse>(Arena*);
template<> ::mavsdk::rpc::winch::RateControlRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::RateControlRequest>(Arena*);
template<> ::mavsdk::rpc::winch::RateControlResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::RateControlResponse>(Arena*);
template<> ::mavsdk::rpc::winch::RelativeLengthControlRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::RelativeLengthControlRequest>(Arena*);
template<> ::mavsdk::rpc::winch::RelativeLengthControlResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::RelativeLengthControlResponse>(Arena*);
template<> ::mavsdk::rpc::winch::RelaxRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::RelaxRequest>(Arena*);
template<> ::mavsdk::rpc::winch::RelaxResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::RelaxResponse>(Arena*);
template<> ::mavsdk::rpc::winch::RetractRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::RetractRequest>(Arena*);
template<> ::mavsdk::rpc::winch::RetractResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::RetractResponse>(Arena*);
template<> ::mavsdk::rpc::winch::WinchResult* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace winch {

enum WinchResult_Result : int {
  WinchResult_Result_RESULT_UNKNOWN = 0,
  WinchResult_Result_RESULT_SUCCESS = 1,
  WinchResult_Result_RESULT_NO_SYSTEM = 2,
  WinchResult_Result_RESULT_CONNECTION_ERROR = 3,
  WinchResult_Result_RESULT_BUSY = 4,
  WinchResult_Result_RESULT_COMMAND_DENIED = 5,
  WinchResult_Result_RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN = 6,
  WinchResult_Result_RESULT_COMMAND_DENIED_NOT_LANDED = 7,
  WinchResult_Result_RESULT_TIMEOUT = 8,
  WinchResult_Result_RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN = 9,
  WinchResult_Result_RESULT_NO_VTOL_TRANSITION_SUPPORT = 10,
  WinchResult_Result_RESULT_PARAMETER_ERROR = 11,
  WinchResult_Result_RESULT_UNSUPPORTED = 12,
  WinchResult_Result_RESULT_FAILED = 13,
  WinchResult_Result_WinchResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WinchResult_Result_WinchResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WinchResult_Result_IsValid(int value);
constexpr WinchResult_Result WinchResult_Result_Result_MIN = WinchResult_Result_RESULT_UNKNOWN;
constexpr WinchResult_Result WinchResult_Result_Result_MAX = WinchResult_Result_RESULT_FAILED;
constexpr int WinchResult_Result_Result_ARRAYSIZE = WinchResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WinchResult_Result_descriptor();
template<typename T>
inline const std::string& WinchResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WinchResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WinchResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WinchResult_Result_descriptor(), enum_t_value);
}
inline bool WinchResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WinchResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WinchResult_Result>(
    WinchResult_Result_descriptor(), name, value);
}
enum WinchAction : int {
  WINCH_ACTION_RELAXED = 0,
  WINCH_ACTION_RELATIVE_LENGTH_CONTROL = 1,
  WINCH_ACTION_RATE_CONTROL = 2,
  WINCH_ACTION_LOCK = 3,
  WINCH_ACTION_DELIVER = 4,
  WINCH_ACTION_HOLD = 5,
  WINCH_ACTION_RETRACT = 6,
  WINCH_ACTION_LOAD_LINE = 7,
  WINCH_ACTION_ABANDON_LINE = 8,
  WINCH_ACTION_LOAD_PAYLOAD = 9,
  WinchAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WinchAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WinchAction_IsValid(int value);
constexpr WinchAction WinchAction_MIN = WINCH_ACTION_RELAXED;
constexpr WinchAction WinchAction_MAX = WINCH_ACTION_LOAD_PAYLOAD;
constexpr int WinchAction_ARRAYSIZE = WinchAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WinchAction_descriptor();
template<typename T>
inline const std::string& WinchAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WinchAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WinchAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WinchAction_descriptor(), enum_t_value);
}
inline bool WinchAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WinchAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WinchAction>(
    WinchAction_descriptor(), name, value);
}
// ===================================================================

class RelaxRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.RelaxRequest) */ {
 public:
  inline RelaxRequest() : RelaxRequest(nullptr) {}
  ~RelaxRequest() override;
  explicit PROTOBUF_CONSTEXPR RelaxRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelaxRequest(const RelaxRequest& from);
  RelaxRequest(RelaxRequest&& from) noexcept
    : RelaxRequest() {
    *this = ::std::move(from);
  }

  inline RelaxRequest& operator=(const RelaxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelaxRequest& operator=(RelaxRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelaxRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelaxRequest* internal_default_instance() {
    return reinterpret_cast<const RelaxRequest*>(
               &_RelaxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RelaxRequest& a, RelaxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RelaxRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelaxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelaxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelaxRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelaxRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RelaxRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelaxRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.RelaxRequest";
  }
  protected:
  explicit RelaxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.RelaxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class RelaxResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.RelaxResponse) */ {
 public:
  inline RelaxResponse() : RelaxResponse(nullptr) {}
  ~RelaxResponse() override;
  explicit PROTOBUF_CONSTEXPR RelaxResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelaxResponse(const RelaxResponse& from);
  RelaxResponse(RelaxResponse&& from) noexcept
    : RelaxResponse() {
    *this = ::std::move(from);
  }

  inline RelaxResponse& operator=(const RelaxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelaxResponse& operator=(RelaxResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelaxResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelaxResponse* internal_default_instance() {
    return reinterpret_cast<const RelaxResponse*>(
               &_RelaxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RelaxResponse& a, RelaxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RelaxResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelaxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelaxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelaxResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelaxResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RelaxResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelaxResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.RelaxResponse";
  }
  protected:
  explicit RelaxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinchResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult winch_result = 1;
  bool has_winch_result() const;
  private:
  bool _internal_has_winch_result() const;
  public:
  void clear_winch_result();
  const ::mavsdk::rpc::winch::WinchResult& winch_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_winch_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_winch_result();
  void set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_winch_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_winch_result();
  public:
  void unsafe_arena_set_allocated_winch_result(
      ::mavsdk::rpc::winch::WinchResult* winch_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_winch_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.RelaxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* winch_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class RelativeLengthControlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.RelativeLengthControlRequest) */ {
 public:
  inline RelativeLengthControlRequest() : RelativeLengthControlRequest(nullptr) {}
  ~RelativeLengthControlRequest() override;
  explicit PROTOBUF_CONSTEXPR RelativeLengthControlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelativeLengthControlRequest(const RelativeLengthControlRequest& from);
  RelativeLengthControlRequest(RelativeLengthControlRequest&& from) noexcept
    : RelativeLengthControlRequest() {
    *this = ::std::move(from);
  }

  inline RelativeLengthControlRequest& operator=(const RelativeLengthControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelativeLengthControlRequest& operator=(RelativeLengthControlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelativeLengthControlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelativeLengthControlRequest* internal_default_instance() {
    return reinterpret_cast<const RelativeLengthControlRequest*>(
               &_RelativeLengthControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RelativeLengthControlRequest& a, RelativeLengthControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RelativeLengthControlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelativeLengthControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelativeLengthControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelativeLengthControlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelativeLengthControlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RelativeLengthControlRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelativeLengthControlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.RelativeLengthControlRequest";
  }
  protected:
  explicit RelativeLengthControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
    kLengthFieldNumber = 2,
    kRateFieldNumber = 3,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // float length = 2;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // float rate = 3;
  void clear_rate();
  float rate() const;
  void set_rate(float value);
  private:
  float _internal_rate() const;
  void _internal_set_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.RelativeLengthControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  float length_;
  float rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class RelativeLengthControlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.RelativeLengthControlResponse) */ {
 public:
  inline RelativeLengthControlResponse() : RelativeLengthControlResponse(nullptr) {}
  ~RelativeLengthControlResponse() override;
  explicit PROTOBUF_CONSTEXPR RelativeLengthControlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelativeLengthControlResponse(const RelativeLengthControlResponse& from);
  RelativeLengthControlResponse(RelativeLengthControlResponse&& from) noexcept
    : RelativeLengthControlResponse() {
    *this = ::std::move(from);
  }

  inline RelativeLengthControlResponse& operator=(const RelativeLengthControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelativeLengthControlResponse& operator=(RelativeLengthControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelativeLengthControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelativeLengthControlResponse* internal_default_instance() {
    return reinterpret_cast<const RelativeLengthControlResponse*>(
               &_RelativeLengthControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RelativeLengthControlResponse& a, RelativeLengthControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RelativeLengthControlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelativeLengthControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelativeLengthControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelativeLengthControlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelativeLengthControlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RelativeLengthControlResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelativeLengthControlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.RelativeLengthControlResponse";
  }
  protected:
  explicit RelativeLengthControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinchResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult winch_result = 1;
  bool has_winch_result() const;
  private:
  bool _internal_has_winch_result() const;
  public:
  void clear_winch_result();
  const ::mavsdk::rpc::winch::WinchResult& winch_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_winch_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_winch_result();
  void set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_winch_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_winch_result();
  public:
  void unsafe_arena_set_allocated_winch_result(
      ::mavsdk::rpc::winch::WinchResult* winch_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_winch_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.RelativeLengthControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* winch_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class RateControlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.RateControlRequest) */ {
 public:
  inline RateControlRequest() : RateControlRequest(nullptr) {}
  ~RateControlRequest() override;
  explicit PROTOBUF_CONSTEXPR RateControlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RateControlRequest(const RateControlRequest& from);
  RateControlRequest(RateControlRequest&& from) noexcept
    : RateControlRequest() {
    *this = ::std::move(from);
  }

  inline RateControlRequest& operator=(const RateControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RateControlRequest& operator=(RateControlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RateControlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RateControlRequest* internal_default_instance() {
    return reinterpret_cast<const RateControlRequest*>(
               &_RateControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RateControlRequest& a, RateControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RateControlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RateControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RateControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RateControlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RateControlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RateControlRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RateControlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.RateControlRequest";
  }
  protected:
  explicit RateControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
    kRateFieldNumber = 2,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // float rate = 2;
  void clear_rate();
  float rate() const;
  void set_rate(float value);
  private:
  float _internal_rate() const;
  void _internal_set_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.RateControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  float rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class RateControlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.RateControlResponse) */ {
 public:
  inline RateControlResponse() : RateControlResponse(nullptr) {}
  ~RateControlResponse() override;
  explicit PROTOBUF_CONSTEXPR RateControlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RateControlResponse(const RateControlResponse& from);
  RateControlResponse(RateControlResponse&& from) noexcept
    : RateControlResponse() {
    *this = ::std::move(from);
  }

  inline RateControlResponse& operator=(const RateControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RateControlResponse& operator=(RateControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RateControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RateControlResponse* internal_default_instance() {
    return reinterpret_cast<const RateControlResponse*>(
               &_RateControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RateControlResponse& a, RateControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RateControlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RateControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RateControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RateControlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RateControlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RateControlResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RateControlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.RateControlResponse";
  }
  protected:
  explicit RateControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinchResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult winch_result = 1;
  bool has_winch_result() const;
  private:
  bool _internal_has_winch_result() const;
  public:
  void clear_winch_result();
  const ::mavsdk::rpc::winch::WinchResult& winch_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_winch_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_winch_result();
  void set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_winch_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_winch_result();
  public:
  void unsafe_arena_set_allocated_winch_result(
      ::mavsdk::rpc::winch::WinchResult* winch_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_winch_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.RateControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* winch_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class LockRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.LockRequest) */ {
 public:
  inline LockRequest() : LockRequest(nullptr) {}
  ~LockRequest() override;
  explicit PROTOBUF_CONSTEXPR LockRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LockRequest(const LockRequest& from);
  LockRequest(LockRequest&& from) noexcept
    : LockRequest() {
    *this = ::std::move(from);
  }

  inline LockRequest& operator=(const LockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockRequest& operator=(LockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LockRequest* internal_default_instance() {
    return reinterpret_cast<const LockRequest*>(
               &_LockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LockRequest& a, LockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LockRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LockRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LockRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LockRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.LockRequest";
  }
  protected:
  explicit LockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.LockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class LockResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.LockResponse) */ {
 public:
  inline LockResponse() : LockResponse(nullptr) {}
  ~LockResponse() override;
  explicit PROTOBUF_CONSTEXPR LockResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LockResponse(const LockResponse& from);
  LockResponse(LockResponse&& from) noexcept
    : LockResponse() {
    *this = ::std::move(from);
  }

  inline LockResponse& operator=(const LockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockResponse& operator=(LockResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LockResponse* internal_default_instance() {
    return reinterpret_cast<const LockResponse*>(
               &_LockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LockResponse& a, LockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LockResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LockResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LockResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LockResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.LockResponse";
  }
  protected:
  explicit LockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinchResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult winch_result = 1;
  bool has_winch_result() const;
  private:
  bool _internal_has_winch_result() const;
  public:
  void clear_winch_result();
  const ::mavsdk::rpc::winch::WinchResult& winch_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_winch_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_winch_result();
  void set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_winch_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_winch_result();
  public:
  void unsafe_arena_set_allocated_winch_result(
      ::mavsdk::rpc::winch::WinchResult* winch_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_winch_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.LockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* winch_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class DeliverRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.DeliverRequest) */ {
 public:
  inline DeliverRequest() : DeliverRequest(nullptr) {}
  ~DeliverRequest() override;
  explicit PROTOBUF_CONSTEXPR DeliverRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeliverRequest(const DeliverRequest& from);
  DeliverRequest(DeliverRequest&& from) noexcept
    : DeliverRequest() {
    *this = ::std::move(from);
  }

  inline DeliverRequest& operator=(const DeliverRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeliverRequest& operator=(DeliverRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeliverRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeliverRequest* internal_default_instance() {
    return reinterpret_cast<const DeliverRequest*>(
               &_DeliverRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeliverRequest& a, DeliverRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeliverRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeliverRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeliverRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeliverRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeliverRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeliverRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeliverRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.DeliverRequest";
  }
  protected:
  explicit DeliverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.DeliverRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class DeliverResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.DeliverResponse) */ {
 public:
  inline DeliverResponse() : DeliverResponse(nullptr) {}
  ~DeliverResponse() override;
  explicit PROTOBUF_CONSTEXPR DeliverResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeliverResponse(const DeliverResponse& from);
  DeliverResponse(DeliverResponse&& from) noexcept
    : DeliverResponse() {
    *this = ::std::move(from);
  }

  inline DeliverResponse& operator=(const DeliverResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeliverResponse& operator=(DeliverResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeliverResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeliverResponse* internal_default_instance() {
    return reinterpret_cast<const DeliverResponse*>(
               &_DeliverResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeliverResponse& a, DeliverResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeliverResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeliverResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeliverResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeliverResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeliverResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeliverResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeliverResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.DeliverResponse";
  }
  protected:
  explicit DeliverResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinchResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult winch_result = 1;
  bool has_winch_result() const;
  private:
  bool _internal_has_winch_result() const;
  public:
  void clear_winch_result();
  const ::mavsdk::rpc::winch::WinchResult& winch_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_winch_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_winch_result();
  void set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_winch_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_winch_result();
  public:
  void unsafe_arena_set_allocated_winch_result(
      ::mavsdk::rpc::winch::WinchResult* winch_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_winch_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.DeliverResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* winch_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class HoldRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.HoldRequest) */ {
 public:
  inline HoldRequest() : HoldRequest(nullptr) {}
  ~HoldRequest() override;
  explicit PROTOBUF_CONSTEXPR HoldRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HoldRequest(const HoldRequest& from);
  HoldRequest(HoldRequest&& from) noexcept
    : HoldRequest() {
    *this = ::std::move(from);
  }

  inline HoldRequest& operator=(const HoldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HoldRequest& operator=(HoldRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HoldRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HoldRequest* internal_default_instance() {
    return reinterpret_cast<const HoldRequest*>(
               &_HoldRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(HoldRequest& a, HoldRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HoldRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HoldRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HoldRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HoldRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HoldRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HoldRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HoldRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.HoldRequest";
  }
  protected:
  explicit HoldRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.HoldRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class HoldResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.HoldResponse) */ {
 public:
  inline HoldResponse() : HoldResponse(nullptr) {}
  ~HoldResponse() override;
  explicit PROTOBUF_CONSTEXPR HoldResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HoldResponse(const HoldResponse& from);
  HoldResponse(HoldResponse&& from) noexcept
    : HoldResponse() {
    *this = ::std::move(from);
  }

  inline HoldResponse& operator=(const HoldResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HoldResponse& operator=(HoldResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HoldResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HoldResponse* internal_default_instance() {
    return reinterpret_cast<const HoldResponse*>(
               &_HoldResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(HoldResponse& a, HoldResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HoldResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HoldResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HoldResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HoldResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HoldResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HoldResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HoldResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.HoldResponse";
  }
  protected:
  explicit HoldResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinchResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult winch_result = 1;
  bool has_winch_result() const;
  private:
  bool _internal_has_winch_result() const;
  public:
  void clear_winch_result();
  const ::mavsdk::rpc::winch::WinchResult& winch_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_winch_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_winch_result();
  void set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_winch_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_winch_result();
  public:
  void unsafe_arena_set_allocated_winch_result(
      ::mavsdk::rpc::winch::WinchResult* winch_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_winch_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.HoldResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* winch_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class RetractRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.RetractRequest) */ {
 public:
  inline RetractRequest() : RetractRequest(nullptr) {}
  ~RetractRequest() override;
  explicit PROTOBUF_CONSTEXPR RetractRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RetractRequest(const RetractRequest& from);
  RetractRequest(RetractRequest&& from) noexcept
    : RetractRequest() {
    *this = ::std::move(from);
  }

  inline RetractRequest& operator=(const RetractRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetractRequest& operator=(RetractRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RetractRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RetractRequest* internal_default_instance() {
    return reinterpret_cast<const RetractRequest*>(
               &_RetractRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RetractRequest& a, RetractRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RetractRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetractRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RetractRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RetractRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RetractRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RetractRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetractRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.RetractRequest";
  }
  protected:
  explicit RetractRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.RetractRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class RetractResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.RetractResponse) */ {
 public:
  inline RetractResponse() : RetractResponse(nullptr) {}
  ~RetractResponse() override;
  explicit PROTOBUF_CONSTEXPR RetractResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RetractResponse(const RetractResponse& from);
  RetractResponse(RetractResponse&& from) noexcept
    : RetractResponse() {
    *this = ::std::move(from);
  }

  inline RetractResponse& operator=(const RetractResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetractResponse& operator=(RetractResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RetractResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RetractResponse* internal_default_instance() {
    return reinterpret_cast<const RetractResponse*>(
               &_RetractResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RetractResponse& a, RetractResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RetractResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetractResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RetractResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RetractResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RetractResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RetractResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetractResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.RetractResponse";
  }
  protected:
  explicit RetractResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinchResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult winch_result = 1;
  bool has_winch_result() const;
  private:
  bool _internal_has_winch_result() const;
  public:
  void clear_winch_result();
  const ::mavsdk::rpc::winch::WinchResult& winch_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_winch_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_winch_result();
  void set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_winch_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_winch_result();
  public:
  void unsafe_arena_set_allocated_winch_result(
      ::mavsdk::rpc::winch::WinchResult* winch_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_winch_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.RetractResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* winch_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class LoadLineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.LoadLineRequest) */ {
 public:
  inline LoadLineRequest() : LoadLineRequest(nullptr) {}
  ~LoadLineRequest() override;
  explicit PROTOBUF_CONSTEXPR LoadLineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadLineRequest(const LoadLineRequest& from);
  LoadLineRequest(LoadLineRequest&& from) noexcept
    : LoadLineRequest() {
    *this = ::std::move(from);
  }

  inline LoadLineRequest& operator=(const LoadLineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadLineRequest& operator=(LoadLineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadLineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadLineRequest* internal_default_instance() {
    return reinterpret_cast<const LoadLineRequest*>(
               &_LoadLineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(LoadLineRequest& a, LoadLineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadLineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadLineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadLineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadLineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadLineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadLineRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadLineRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.LoadLineRequest";
  }
  protected:
  explicit LoadLineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.LoadLineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class LoadLineResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.LoadLineResponse) */ {
 public:
  inline LoadLineResponse() : LoadLineResponse(nullptr) {}
  ~LoadLineResponse() override;
  explicit PROTOBUF_CONSTEXPR LoadLineResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadLineResponse(const LoadLineResponse& from);
  LoadLineResponse(LoadLineResponse&& from) noexcept
    : LoadLineResponse() {
    *this = ::std::move(from);
  }

  inline LoadLineResponse& operator=(const LoadLineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadLineResponse& operator=(LoadLineResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadLineResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadLineResponse* internal_default_instance() {
    return reinterpret_cast<const LoadLineResponse*>(
               &_LoadLineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(LoadLineResponse& a, LoadLineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadLineResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadLineResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadLineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadLineResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadLineResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadLineResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadLineResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.LoadLineResponse";
  }
  protected:
  explicit LoadLineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinchResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult winch_result = 1;
  bool has_winch_result() const;
  private:
  bool _internal_has_winch_result() const;
  public:
  void clear_winch_result();
  const ::mavsdk::rpc::winch::WinchResult& winch_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_winch_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_winch_result();
  void set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_winch_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_winch_result();
  public:
  void unsafe_arena_set_allocated_winch_result(
      ::mavsdk::rpc::winch::WinchResult* winch_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_winch_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.LoadLineResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* winch_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class AbandonLineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.AbandonLineRequest) */ {
 public:
  inline AbandonLineRequest() : AbandonLineRequest(nullptr) {}
  ~AbandonLineRequest() override;
  explicit PROTOBUF_CONSTEXPR AbandonLineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AbandonLineRequest(const AbandonLineRequest& from);
  AbandonLineRequest(AbandonLineRequest&& from) noexcept
    : AbandonLineRequest() {
    *this = ::std::move(from);
  }

  inline AbandonLineRequest& operator=(const AbandonLineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbandonLineRequest& operator=(AbandonLineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AbandonLineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AbandonLineRequest* internal_default_instance() {
    return reinterpret_cast<const AbandonLineRequest*>(
               &_AbandonLineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AbandonLineRequest& a, AbandonLineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AbandonLineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AbandonLineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AbandonLineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AbandonLineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AbandonLineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AbandonLineRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbandonLineRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.AbandonLineRequest";
  }
  protected:
  explicit AbandonLineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.AbandonLineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class AbandonLineResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.AbandonLineResponse) */ {
 public:
  inline AbandonLineResponse() : AbandonLineResponse(nullptr) {}
  ~AbandonLineResponse() override;
  explicit PROTOBUF_CONSTEXPR AbandonLineResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AbandonLineResponse(const AbandonLineResponse& from);
  AbandonLineResponse(AbandonLineResponse&& from) noexcept
    : AbandonLineResponse() {
    *this = ::std::move(from);
  }

  inline AbandonLineResponse& operator=(const AbandonLineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbandonLineResponse& operator=(AbandonLineResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AbandonLineResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AbandonLineResponse* internal_default_instance() {
    return reinterpret_cast<const AbandonLineResponse*>(
               &_AbandonLineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AbandonLineResponse& a, AbandonLineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AbandonLineResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AbandonLineResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AbandonLineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AbandonLineResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AbandonLineResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AbandonLineResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbandonLineResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.AbandonLineResponse";
  }
  protected:
  explicit AbandonLineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinchResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult winch_result = 1;
  bool has_winch_result() const;
  private:
  bool _internal_has_winch_result() const;
  public:
  void clear_winch_result();
  const ::mavsdk::rpc::winch::WinchResult& winch_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_winch_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_winch_result();
  void set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_winch_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_winch_result();
  public:
  void unsafe_arena_set_allocated_winch_result(
      ::mavsdk::rpc::winch::WinchResult* winch_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_winch_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.AbandonLineResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* winch_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class LoadPayloadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.LoadPayloadRequest) */ {
 public:
  inline LoadPayloadRequest() : LoadPayloadRequest(nullptr) {}
  ~LoadPayloadRequest() override;
  explicit PROTOBUF_CONSTEXPR LoadPayloadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadPayloadRequest(const LoadPayloadRequest& from);
  LoadPayloadRequest(LoadPayloadRequest&& from) noexcept
    : LoadPayloadRequest() {
    *this = ::std::move(from);
  }

  inline LoadPayloadRequest& operator=(const LoadPayloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadPayloadRequest& operator=(LoadPayloadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadPayloadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadPayloadRequest* internal_default_instance() {
    return reinterpret_cast<const LoadPayloadRequest*>(
               &_LoadPayloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(LoadPayloadRequest& a, LoadPayloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadPayloadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadPayloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadPayloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadPayloadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadPayloadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadPayloadRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadPayloadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.LoadPayloadRequest";
  }
  protected:
  explicit LoadPayloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.LoadPayloadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class LoadPayloadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.LoadPayloadResponse) */ {
 public:
  inline LoadPayloadResponse() : LoadPayloadResponse(nullptr) {}
  ~LoadPayloadResponse() override;
  explicit PROTOBUF_CONSTEXPR LoadPayloadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadPayloadResponse(const LoadPayloadResponse& from);
  LoadPayloadResponse(LoadPayloadResponse&& from) noexcept
    : LoadPayloadResponse() {
    *this = ::std::move(from);
  }

  inline LoadPayloadResponse& operator=(const LoadPayloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadPayloadResponse& operator=(LoadPayloadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadPayloadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadPayloadResponse* internal_default_instance() {
    return reinterpret_cast<const LoadPayloadResponse*>(
               &_LoadPayloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(LoadPayloadResponse& a, LoadPayloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadPayloadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadPayloadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadPayloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadPayloadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadPayloadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadPayloadResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadPayloadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.LoadPayloadResponse";
  }
  protected:
  explicit LoadPayloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinchResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult winch_result = 1;
  bool has_winch_result() const;
  private:
  bool _internal_has_winch_result() const;
  public:
  void clear_winch_result();
  const ::mavsdk::rpc::winch::WinchResult& winch_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_winch_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_winch_result();
  void set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_winch_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_winch_result();
  public:
  void unsafe_arena_set_allocated_winch_result(
      ::mavsdk::rpc::winch::WinchResult* winch_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_winch_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.LoadPayloadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* winch_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchResult) */ {
 public:
  inline WinchResult() : WinchResult(nullptr) {}
  ~WinchResult() override;
  explicit PROTOBUF_CONSTEXPR WinchResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchResult(const WinchResult& from);
  WinchResult(WinchResult&& from) noexcept
    : WinchResult() {
    *this = ::std::move(from);
  }

  inline WinchResult& operator=(const WinchResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchResult& operator=(WinchResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchResult* internal_default_instance() {
    return reinterpret_cast<const WinchResult*>(
               &_WinchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(WinchResult& a, WinchResult& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchResult";
  }
  protected:
  explicit WinchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WinchResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    WinchResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    WinchResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM =
    WinchResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR =
    WinchResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_BUSY =
    WinchResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_COMMAND_DENIED =
    WinchResult_Result_RESULT_COMMAND_DENIED;
  static constexpr Result RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN =
    WinchResult_Result_RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN;
  static constexpr Result RESULT_COMMAND_DENIED_NOT_LANDED =
    WinchResult_Result_RESULT_COMMAND_DENIED_NOT_LANDED;
  static constexpr Result RESULT_TIMEOUT =
    WinchResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN =
    WinchResult_Result_RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN;
  static constexpr Result RESULT_NO_VTOL_TRANSITION_SUPPORT =
    WinchResult_Result_RESULT_NO_VTOL_TRANSITION_SUPPORT;
  static constexpr Result RESULT_PARAMETER_ERROR =
    WinchResult_Result_RESULT_PARAMETER_ERROR;
  static constexpr Result RESULT_UNSUPPORTED =
    WinchResult_Result_RESULT_UNSUPPORTED;
  static constexpr Result RESULT_FAILED =
    WinchResult_Result_RESULT_FAILED;
  static inline bool Result_IsValid(int value) {
    return WinchResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    WinchResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    WinchResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    WinchResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return WinchResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return WinchResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return WinchResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.winch.WinchResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::winch::WinchResult_Result result() const;
  void set_result(::mavsdk::rpc::winch::WinchResult_Result value);
  private:
  ::mavsdk::rpc::winch::WinchResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::winch::WinchResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RelaxRequest

// uint32 instance = 1;
inline void RelaxRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t RelaxRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t RelaxRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.RelaxRequest.instance)
  return _internal_instance();
}
inline void RelaxRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void RelaxRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.RelaxRequest.instance)
}

// -------------------------------------------------------------------

// RelaxResponse

// .mavsdk.rpc.winch.WinchResult winch_result = 1;
inline bool RelaxResponse::_internal_has_winch_result() const {
  return this != internal_default_instance() && winch_result_ != nullptr;
}
inline bool RelaxResponse::has_winch_result() const {
  return _internal_has_winch_result();
}
inline void RelaxResponse::clear_winch_result() {
  if (GetArenaForAllocation() == nullptr && winch_result_ != nullptr) {
    delete winch_result_;
  }
  winch_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& RelaxResponse::_internal_winch_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = winch_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& RelaxResponse::winch_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.RelaxResponse.winch_result)
  return _internal_winch_result();
}
inline void RelaxResponse::unsafe_arena_set_allocated_winch_result(
    ::mavsdk::rpc::winch::WinchResult* winch_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(winch_result_);
  }
  winch_result_ = winch_result;
  if (winch_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.RelaxResponse.winch_result)
}
inline ::mavsdk::rpc::winch::WinchResult* RelaxResponse::release_winch_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* RelaxResponse::unsafe_arena_release_winch_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.RelaxResponse.winch_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* RelaxResponse::_internal_mutable_winch_result() {
  
  if (winch_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    winch_result_ = p;
  }
  return winch_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* RelaxResponse::mutable_winch_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_winch_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.RelaxResponse.winch_result)
  return _msg;
}
inline void RelaxResponse::set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete winch_result_;
  }
  if (winch_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(winch_result);
    if (message_arena != submessage_arena) {
      winch_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, winch_result, submessage_arena);
    }
    
  } else {
    
  }
  winch_result_ = winch_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.RelaxResponse.winch_result)
}

// -------------------------------------------------------------------

// RelativeLengthControlRequest

// uint32 instance = 1;
inline void RelativeLengthControlRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t RelativeLengthControlRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t RelativeLengthControlRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.RelativeLengthControlRequest.instance)
  return _internal_instance();
}
inline void RelativeLengthControlRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void RelativeLengthControlRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.RelativeLengthControlRequest.instance)
}

// float length = 2;
inline void RelativeLengthControlRequest::clear_length() {
  length_ = 0;
}
inline float RelativeLengthControlRequest::_internal_length() const {
  return length_;
}
inline float RelativeLengthControlRequest::length() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.RelativeLengthControlRequest.length)
  return _internal_length();
}
inline void RelativeLengthControlRequest::_internal_set_length(float value) {
  
  length_ = value;
}
inline void RelativeLengthControlRequest::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.RelativeLengthControlRequest.length)
}

// float rate = 3;
inline void RelativeLengthControlRequest::clear_rate() {
  rate_ = 0;
}
inline float RelativeLengthControlRequest::_internal_rate() const {
  return rate_;
}
inline float RelativeLengthControlRequest::rate() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.RelativeLengthControlRequest.rate)
  return _internal_rate();
}
inline void RelativeLengthControlRequest::_internal_set_rate(float value) {
  
  rate_ = value;
}
inline void RelativeLengthControlRequest::set_rate(float value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.RelativeLengthControlRequest.rate)
}

// -------------------------------------------------------------------

// RelativeLengthControlResponse

// .mavsdk.rpc.winch.WinchResult winch_result = 1;
inline bool RelativeLengthControlResponse::_internal_has_winch_result() const {
  return this != internal_default_instance() && winch_result_ != nullptr;
}
inline bool RelativeLengthControlResponse::has_winch_result() const {
  return _internal_has_winch_result();
}
inline void RelativeLengthControlResponse::clear_winch_result() {
  if (GetArenaForAllocation() == nullptr && winch_result_ != nullptr) {
    delete winch_result_;
  }
  winch_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& RelativeLengthControlResponse::_internal_winch_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = winch_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& RelativeLengthControlResponse::winch_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.RelativeLengthControlResponse.winch_result)
  return _internal_winch_result();
}
inline void RelativeLengthControlResponse::unsafe_arena_set_allocated_winch_result(
    ::mavsdk::rpc::winch::WinchResult* winch_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(winch_result_);
  }
  winch_result_ = winch_result;
  if (winch_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.RelativeLengthControlResponse.winch_result)
}
inline ::mavsdk::rpc::winch::WinchResult* RelativeLengthControlResponse::release_winch_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* RelativeLengthControlResponse::unsafe_arena_release_winch_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.RelativeLengthControlResponse.winch_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* RelativeLengthControlResponse::_internal_mutable_winch_result() {
  
  if (winch_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    winch_result_ = p;
  }
  return winch_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* RelativeLengthControlResponse::mutable_winch_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_winch_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.RelativeLengthControlResponse.winch_result)
  return _msg;
}
inline void RelativeLengthControlResponse::set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete winch_result_;
  }
  if (winch_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(winch_result);
    if (message_arena != submessage_arena) {
      winch_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, winch_result, submessage_arena);
    }
    
  } else {
    
  }
  winch_result_ = winch_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.RelativeLengthControlResponse.winch_result)
}

// -------------------------------------------------------------------

// RateControlRequest

// uint32 instance = 1;
inline void RateControlRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t RateControlRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t RateControlRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.RateControlRequest.instance)
  return _internal_instance();
}
inline void RateControlRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void RateControlRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.RateControlRequest.instance)
}

// float rate = 2;
inline void RateControlRequest::clear_rate() {
  rate_ = 0;
}
inline float RateControlRequest::_internal_rate() const {
  return rate_;
}
inline float RateControlRequest::rate() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.RateControlRequest.rate)
  return _internal_rate();
}
inline void RateControlRequest::_internal_set_rate(float value) {
  
  rate_ = value;
}
inline void RateControlRequest::set_rate(float value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.RateControlRequest.rate)
}

// -------------------------------------------------------------------

// RateControlResponse

// .mavsdk.rpc.winch.WinchResult winch_result = 1;
inline bool RateControlResponse::_internal_has_winch_result() const {
  return this != internal_default_instance() && winch_result_ != nullptr;
}
inline bool RateControlResponse::has_winch_result() const {
  return _internal_has_winch_result();
}
inline void RateControlResponse::clear_winch_result() {
  if (GetArenaForAllocation() == nullptr && winch_result_ != nullptr) {
    delete winch_result_;
  }
  winch_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& RateControlResponse::_internal_winch_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = winch_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& RateControlResponse::winch_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.RateControlResponse.winch_result)
  return _internal_winch_result();
}
inline void RateControlResponse::unsafe_arena_set_allocated_winch_result(
    ::mavsdk::rpc::winch::WinchResult* winch_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(winch_result_);
  }
  winch_result_ = winch_result;
  if (winch_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.RateControlResponse.winch_result)
}
inline ::mavsdk::rpc::winch::WinchResult* RateControlResponse::release_winch_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* RateControlResponse::unsafe_arena_release_winch_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.RateControlResponse.winch_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* RateControlResponse::_internal_mutable_winch_result() {
  
  if (winch_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    winch_result_ = p;
  }
  return winch_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* RateControlResponse::mutable_winch_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_winch_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.RateControlResponse.winch_result)
  return _msg;
}
inline void RateControlResponse::set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete winch_result_;
  }
  if (winch_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(winch_result);
    if (message_arena != submessage_arena) {
      winch_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, winch_result, submessage_arena);
    }
    
  } else {
    
  }
  winch_result_ = winch_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.RateControlResponse.winch_result)
}

// -------------------------------------------------------------------

// LockRequest

// uint32 instance = 1;
inline void LockRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t LockRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t LockRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.LockRequest.instance)
  return _internal_instance();
}
inline void LockRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void LockRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.LockRequest.instance)
}

// -------------------------------------------------------------------

// LockResponse

// .mavsdk.rpc.winch.WinchResult winch_result = 1;
inline bool LockResponse::_internal_has_winch_result() const {
  return this != internal_default_instance() && winch_result_ != nullptr;
}
inline bool LockResponse::has_winch_result() const {
  return _internal_has_winch_result();
}
inline void LockResponse::clear_winch_result() {
  if (GetArenaForAllocation() == nullptr && winch_result_ != nullptr) {
    delete winch_result_;
  }
  winch_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& LockResponse::_internal_winch_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = winch_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& LockResponse::winch_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.LockResponse.winch_result)
  return _internal_winch_result();
}
inline void LockResponse::unsafe_arena_set_allocated_winch_result(
    ::mavsdk::rpc::winch::WinchResult* winch_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(winch_result_);
  }
  winch_result_ = winch_result;
  if (winch_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.LockResponse.winch_result)
}
inline ::mavsdk::rpc::winch::WinchResult* LockResponse::release_winch_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* LockResponse::unsafe_arena_release_winch_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.LockResponse.winch_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* LockResponse::_internal_mutable_winch_result() {
  
  if (winch_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    winch_result_ = p;
  }
  return winch_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* LockResponse::mutable_winch_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_winch_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.LockResponse.winch_result)
  return _msg;
}
inline void LockResponse::set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete winch_result_;
  }
  if (winch_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(winch_result);
    if (message_arena != submessage_arena) {
      winch_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, winch_result, submessage_arena);
    }
    
  } else {
    
  }
  winch_result_ = winch_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.LockResponse.winch_result)
}

// -------------------------------------------------------------------

// DeliverRequest

// uint32 instance = 1;
inline void DeliverRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t DeliverRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t DeliverRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.DeliverRequest.instance)
  return _internal_instance();
}
inline void DeliverRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void DeliverRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.DeliverRequest.instance)
}

// -------------------------------------------------------------------

// DeliverResponse

// .mavsdk.rpc.winch.WinchResult winch_result = 1;
inline bool DeliverResponse::_internal_has_winch_result() const {
  return this != internal_default_instance() && winch_result_ != nullptr;
}
inline bool DeliverResponse::has_winch_result() const {
  return _internal_has_winch_result();
}
inline void DeliverResponse::clear_winch_result() {
  if (GetArenaForAllocation() == nullptr && winch_result_ != nullptr) {
    delete winch_result_;
  }
  winch_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& DeliverResponse::_internal_winch_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = winch_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& DeliverResponse::winch_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.DeliverResponse.winch_result)
  return _internal_winch_result();
}
inline void DeliverResponse::unsafe_arena_set_allocated_winch_result(
    ::mavsdk::rpc::winch::WinchResult* winch_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(winch_result_);
  }
  winch_result_ = winch_result;
  if (winch_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.DeliverResponse.winch_result)
}
inline ::mavsdk::rpc::winch::WinchResult* DeliverResponse::release_winch_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* DeliverResponse::unsafe_arena_release_winch_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.DeliverResponse.winch_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* DeliverResponse::_internal_mutable_winch_result() {
  
  if (winch_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    winch_result_ = p;
  }
  return winch_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* DeliverResponse::mutable_winch_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_winch_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.DeliverResponse.winch_result)
  return _msg;
}
inline void DeliverResponse::set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete winch_result_;
  }
  if (winch_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(winch_result);
    if (message_arena != submessage_arena) {
      winch_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, winch_result, submessage_arena);
    }
    
  } else {
    
  }
  winch_result_ = winch_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.DeliverResponse.winch_result)
}

// -------------------------------------------------------------------

// HoldRequest

// uint32 instance = 1;
inline void HoldRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t HoldRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t HoldRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.HoldRequest.instance)
  return _internal_instance();
}
inline void HoldRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void HoldRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.HoldRequest.instance)
}

// -------------------------------------------------------------------

// HoldResponse

// .mavsdk.rpc.winch.WinchResult winch_result = 1;
inline bool HoldResponse::_internal_has_winch_result() const {
  return this != internal_default_instance() && winch_result_ != nullptr;
}
inline bool HoldResponse::has_winch_result() const {
  return _internal_has_winch_result();
}
inline void HoldResponse::clear_winch_result() {
  if (GetArenaForAllocation() == nullptr && winch_result_ != nullptr) {
    delete winch_result_;
  }
  winch_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& HoldResponse::_internal_winch_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = winch_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& HoldResponse::winch_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.HoldResponse.winch_result)
  return _internal_winch_result();
}
inline void HoldResponse::unsafe_arena_set_allocated_winch_result(
    ::mavsdk::rpc::winch::WinchResult* winch_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(winch_result_);
  }
  winch_result_ = winch_result;
  if (winch_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.HoldResponse.winch_result)
}
inline ::mavsdk::rpc::winch::WinchResult* HoldResponse::release_winch_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* HoldResponse::unsafe_arena_release_winch_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.HoldResponse.winch_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* HoldResponse::_internal_mutable_winch_result() {
  
  if (winch_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    winch_result_ = p;
  }
  return winch_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* HoldResponse::mutable_winch_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_winch_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.HoldResponse.winch_result)
  return _msg;
}
inline void HoldResponse::set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete winch_result_;
  }
  if (winch_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(winch_result);
    if (message_arena != submessage_arena) {
      winch_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, winch_result, submessage_arena);
    }
    
  } else {
    
  }
  winch_result_ = winch_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.HoldResponse.winch_result)
}

// -------------------------------------------------------------------

// RetractRequest

// uint32 instance = 1;
inline void RetractRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t RetractRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t RetractRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.RetractRequest.instance)
  return _internal_instance();
}
inline void RetractRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void RetractRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.RetractRequest.instance)
}

// -------------------------------------------------------------------

// RetractResponse

// .mavsdk.rpc.winch.WinchResult winch_result = 1;
inline bool RetractResponse::_internal_has_winch_result() const {
  return this != internal_default_instance() && winch_result_ != nullptr;
}
inline bool RetractResponse::has_winch_result() const {
  return _internal_has_winch_result();
}
inline void RetractResponse::clear_winch_result() {
  if (GetArenaForAllocation() == nullptr && winch_result_ != nullptr) {
    delete winch_result_;
  }
  winch_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& RetractResponse::_internal_winch_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = winch_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& RetractResponse::winch_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.RetractResponse.winch_result)
  return _internal_winch_result();
}
inline void RetractResponse::unsafe_arena_set_allocated_winch_result(
    ::mavsdk::rpc::winch::WinchResult* winch_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(winch_result_);
  }
  winch_result_ = winch_result;
  if (winch_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.RetractResponse.winch_result)
}
inline ::mavsdk::rpc::winch::WinchResult* RetractResponse::release_winch_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* RetractResponse::unsafe_arena_release_winch_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.RetractResponse.winch_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* RetractResponse::_internal_mutable_winch_result() {
  
  if (winch_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    winch_result_ = p;
  }
  return winch_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* RetractResponse::mutable_winch_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_winch_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.RetractResponse.winch_result)
  return _msg;
}
inline void RetractResponse::set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete winch_result_;
  }
  if (winch_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(winch_result);
    if (message_arena != submessage_arena) {
      winch_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, winch_result, submessage_arena);
    }
    
  } else {
    
  }
  winch_result_ = winch_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.RetractResponse.winch_result)
}

// -------------------------------------------------------------------

// LoadLineRequest

// uint32 instance = 1;
inline void LoadLineRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t LoadLineRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t LoadLineRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.LoadLineRequest.instance)
  return _internal_instance();
}
inline void LoadLineRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void LoadLineRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.LoadLineRequest.instance)
}

// -------------------------------------------------------------------

// LoadLineResponse

// .mavsdk.rpc.winch.WinchResult winch_result = 1;
inline bool LoadLineResponse::_internal_has_winch_result() const {
  return this != internal_default_instance() && winch_result_ != nullptr;
}
inline bool LoadLineResponse::has_winch_result() const {
  return _internal_has_winch_result();
}
inline void LoadLineResponse::clear_winch_result() {
  if (GetArenaForAllocation() == nullptr && winch_result_ != nullptr) {
    delete winch_result_;
  }
  winch_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& LoadLineResponse::_internal_winch_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = winch_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& LoadLineResponse::winch_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.LoadLineResponse.winch_result)
  return _internal_winch_result();
}
inline void LoadLineResponse::unsafe_arena_set_allocated_winch_result(
    ::mavsdk::rpc::winch::WinchResult* winch_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(winch_result_);
  }
  winch_result_ = winch_result;
  if (winch_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.LoadLineResponse.winch_result)
}
inline ::mavsdk::rpc::winch::WinchResult* LoadLineResponse::release_winch_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* LoadLineResponse::unsafe_arena_release_winch_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.LoadLineResponse.winch_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* LoadLineResponse::_internal_mutable_winch_result() {
  
  if (winch_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    winch_result_ = p;
  }
  return winch_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* LoadLineResponse::mutable_winch_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_winch_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.LoadLineResponse.winch_result)
  return _msg;
}
inline void LoadLineResponse::set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete winch_result_;
  }
  if (winch_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(winch_result);
    if (message_arena != submessage_arena) {
      winch_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, winch_result, submessage_arena);
    }
    
  } else {
    
  }
  winch_result_ = winch_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.LoadLineResponse.winch_result)
}

// -------------------------------------------------------------------

// AbandonLineRequest

// uint32 instance = 1;
inline void AbandonLineRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t AbandonLineRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t AbandonLineRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.AbandonLineRequest.instance)
  return _internal_instance();
}
inline void AbandonLineRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void AbandonLineRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.AbandonLineRequest.instance)
}

// -------------------------------------------------------------------

// AbandonLineResponse

// .mavsdk.rpc.winch.WinchResult winch_result = 1;
inline bool AbandonLineResponse::_internal_has_winch_result() const {
  return this != internal_default_instance() && winch_result_ != nullptr;
}
inline bool AbandonLineResponse::has_winch_result() const {
  return _internal_has_winch_result();
}
inline void AbandonLineResponse::clear_winch_result() {
  if (GetArenaForAllocation() == nullptr && winch_result_ != nullptr) {
    delete winch_result_;
  }
  winch_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& AbandonLineResponse::_internal_winch_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = winch_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& AbandonLineResponse::winch_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.AbandonLineResponse.winch_result)
  return _internal_winch_result();
}
inline void AbandonLineResponse::unsafe_arena_set_allocated_winch_result(
    ::mavsdk::rpc::winch::WinchResult* winch_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(winch_result_);
  }
  winch_result_ = winch_result;
  if (winch_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.AbandonLineResponse.winch_result)
}
inline ::mavsdk::rpc::winch::WinchResult* AbandonLineResponse::release_winch_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* AbandonLineResponse::unsafe_arena_release_winch_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.AbandonLineResponse.winch_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* AbandonLineResponse::_internal_mutable_winch_result() {
  
  if (winch_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    winch_result_ = p;
  }
  return winch_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* AbandonLineResponse::mutable_winch_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_winch_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.AbandonLineResponse.winch_result)
  return _msg;
}
inline void AbandonLineResponse::set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete winch_result_;
  }
  if (winch_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(winch_result);
    if (message_arena != submessage_arena) {
      winch_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, winch_result, submessage_arena);
    }
    
  } else {
    
  }
  winch_result_ = winch_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.AbandonLineResponse.winch_result)
}

// -------------------------------------------------------------------

// LoadPayloadRequest

// uint32 instance = 1;
inline void LoadPayloadRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t LoadPayloadRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t LoadPayloadRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.LoadPayloadRequest.instance)
  return _internal_instance();
}
inline void LoadPayloadRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void LoadPayloadRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.LoadPayloadRequest.instance)
}

// -------------------------------------------------------------------

// LoadPayloadResponse

// .mavsdk.rpc.winch.WinchResult winch_result = 1;
inline bool LoadPayloadResponse::_internal_has_winch_result() const {
  return this != internal_default_instance() && winch_result_ != nullptr;
}
inline bool LoadPayloadResponse::has_winch_result() const {
  return _internal_has_winch_result();
}
inline void LoadPayloadResponse::clear_winch_result() {
  if (GetArenaForAllocation() == nullptr && winch_result_ != nullptr) {
    delete winch_result_;
  }
  winch_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& LoadPayloadResponse::_internal_winch_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = winch_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& LoadPayloadResponse::winch_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.LoadPayloadResponse.winch_result)
  return _internal_winch_result();
}
inline void LoadPayloadResponse::unsafe_arena_set_allocated_winch_result(
    ::mavsdk::rpc::winch::WinchResult* winch_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(winch_result_);
  }
  winch_result_ = winch_result;
  if (winch_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.LoadPayloadResponse.winch_result)
}
inline ::mavsdk::rpc::winch::WinchResult* LoadPayloadResponse::release_winch_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* LoadPayloadResponse::unsafe_arena_release_winch_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.LoadPayloadResponse.winch_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = winch_result_;
  winch_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* LoadPayloadResponse::_internal_mutable_winch_result() {
  
  if (winch_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    winch_result_ = p;
  }
  return winch_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* LoadPayloadResponse::mutable_winch_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_winch_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.LoadPayloadResponse.winch_result)
  return _msg;
}
inline void LoadPayloadResponse::set_allocated_winch_result(::mavsdk::rpc::winch::WinchResult* winch_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete winch_result_;
  }
  if (winch_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(winch_result);
    if (message_arena != submessage_arena) {
      winch_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, winch_result, submessage_arena);
    }
    
  } else {
    
  }
  winch_result_ = winch_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.LoadPayloadResponse.winch_result)
}

// -------------------------------------------------------------------

// WinchResult

// .mavsdk.rpc.winch.WinchResult.Result result = 1;
inline void WinchResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::winch::WinchResult_Result WinchResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::winch::WinchResult_Result >(result_);
}
inline ::mavsdk::rpc::winch::WinchResult_Result WinchResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchResult.result)
  return _internal_result();
}
inline void WinchResult::_internal_set_result(::mavsdk::rpc::winch::WinchResult_Result value) {
  
  result_ = value;
}
inline void WinchResult::set_result(::mavsdk::rpc::winch::WinchResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.WinchResult.result)
}

// string result_str = 2;
inline void WinchResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& WinchResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WinchResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.WinchResult.result_str)
}
inline std::string* WinchResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.WinchResult.result_str)
  return _s;
}
inline const std::string& WinchResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void WinchResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* WinchResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* WinchResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.WinchResult.result_str)
  return result_str_.Release();
}
inline void WinchResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_str_.IsDefault()) {
    result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.WinchResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace winch
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::winch::WinchResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::winch::WinchResult_Result>() {
  return ::mavsdk::rpc::winch::WinchResult_Result_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::winch::WinchAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::winch::WinchAction>() {
  return ::mavsdk::rpc::winch::WinchAction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_winch_2fwinch_2eproto
