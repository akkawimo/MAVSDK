// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: winch/winch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_winch_2fwinch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_winch_2fwinch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_winch_2fwinch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_winch_2fwinch_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_winch_2fwinch_2eproto;
namespace mavsdk {
namespace rpc {
namespace winch {
class WinchAbandonLineRequest;
struct WinchAbandonLineRequestDefaultTypeInternal;
extern WinchAbandonLineRequestDefaultTypeInternal _WinchAbandonLineRequest_default_instance_;
class WinchAbandonLineResponse;
struct WinchAbandonLineResponseDefaultTypeInternal;
extern WinchAbandonLineResponseDefaultTypeInternal _WinchAbandonLineResponse_default_instance_;
class WinchDeliverRequest;
struct WinchDeliverRequestDefaultTypeInternal;
extern WinchDeliverRequestDefaultTypeInternal _WinchDeliverRequest_default_instance_;
class WinchDeliverResponse;
struct WinchDeliverResponseDefaultTypeInternal;
extern WinchDeliverResponseDefaultTypeInternal _WinchDeliverResponse_default_instance_;
class WinchHoldRequest;
struct WinchHoldRequestDefaultTypeInternal;
extern WinchHoldRequestDefaultTypeInternal _WinchHoldRequest_default_instance_;
class WinchHoldResponse;
struct WinchHoldResponseDefaultTypeInternal;
extern WinchHoldResponseDefaultTypeInternal _WinchHoldResponse_default_instance_;
class WinchLoadLineRequest;
struct WinchLoadLineRequestDefaultTypeInternal;
extern WinchLoadLineRequestDefaultTypeInternal _WinchLoadLineRequest_default_instance_;
class WinchLoadLineResponse;
struct WinchLoadLineResponseDefaultTypeInternal;
extern WinchLoadLineResponseDefaultTypeInternal _WinchLoadLineResponse_default_instance_;
class WinchLoadPayloadRequest;
struct WinchLoadPayloadRequestDefaultTypeInternal;
extern WinchLoadPayloadRequestDefaultTypeInternal _WinchLoadPayloadRequest_default_instance_;
class WinchLoadPayloadResponse;
struct WinchLoadPayloadResponseDefaultTypeInternal;
extern WinchLoadPayloadResponseDefaultTypeInternal _WinchLoadPayloadResponse_default_instance_;
class WinchLockRequest;
struct WinchLockRequestDefaultTypeInternal;
extern WinchLockRequestDefaultTypeInternal _WinchLockRequest_default_instance_;
class WinchLockResponse;
struct WinchLockResponseDefaultTypeInternal;
extern WinchLockResponseDefaultTypeInternal _WinchLockResponse_default_instance_;
class WinchRateControlRequest;
struct WinchRateControlRequestDefaultTypeInternal;
extern WinchRateControlRequestDefaultTypeInternal _WinchRateControlRequest_default_instance_;
class WinchRateControlResponse;
struct WinchRateControlResponseDefaultTypeInternal;
extern WinchRateControlResponseDefaultTypeInternal _WinchRateControlResponse_default_instance_;
class WinchRelativeLengthControlRequest;
struct WinchRelativeLengthControlRequestDefaultTypeInternal;
extern WinchRelativeLengthControlRequestDefaultTypeInternal _WinchRelativeLengthControlRequest_default_instance_;
class WinchRelativeLengthControlResponse;
struct WinchRelativeLengthControlResponseDefaultTypeInternal;
extern WinchRelativeLengthControlResponseDefaultTypeInternal _WinchRelativeLengthControlResponse_default_instance_;
class WinchRelaxRequest;
struct WinchRelaxRequestDefaultTypeInternal;
extern WinchRelaxRequestDefaultTypeInternal _WinchRelaxRequest_default_instance_;
class WinchRelaxResponse;
struct WinchRelaxResponseDefaultTypeInternal;
extern WinchRelaxResponseDefaultTypeInternal _WinchRelaxResponse_default_instance_;
class WinchResult;
struct WinchResultDefaultTypeInternal;
extern WinchResultDefaultTypeInternal _WinchResult_default_instance_;
class WinchRetractRequest;
struct WinchRetractRequestDefaultTypeInternal;
extern WinchRetractRequestDefaultTypeInternal _WinchRetractRequest_default_instance_;
class WinchRetractResponse;
struct WinchRetractResponseDefaultTypeInternal;
extern WinchRetractResponseDefaultTypeInternal _WinchRetractResponse_default_instance_;
}  // namespace winch
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::winch::WinchAbandonLineRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchAbandonLineRequest>(Arena*);
template<> ::mavsdk::rpc::winch::WinchAbandonLineResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchAbandonLineResponse>(Arena*);
template<> ::mavsdk::rpc::winch::WinchDeliverRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchDeliverRequest>(Arena*);
template<> ::mavsdk::rpc::winch::WinchDeliverResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchDeliverResponse>(Arena*);
template<> ::mavsdk::rpc::winch::WinchHoldRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchHoldRequest>(Arena*);
template<> ::mavsdk::rpc::winch::WinchHoldResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchHoldResponse>(Arena*);
template<> ::mavsdk::rpc::winch::WinchLoadLineRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchLoadLineRequest>(Arena*);
template<> ::mavsdk::rpc::winch::WinchLoadLineResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchLoadLineResponse>(Arena*);
template<> ::mavsdk::rpc::winch::WinchLoadPayloadRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchLoadPayloadRequest>(Arena*);
template<> ::mavsdk::rpc::winch::WinchLoadPayloadResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchLoadPayloadResponse>(Arena*);
template<> ::mavsdk::rpc::winch::WinchLockRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchLockRequest>(Arena*);
template<> ::mavsdk::rpc::winch::WinchLockResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchLockResponse>(Arena*);
template<> ::mavsdk::rpc::winch::WinchRateControlRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchRateControlRequest>(Arena*);
template<> ::mavsdk::rpc::winch::WinchRateControlResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchRateControlResponse>(Arena*);
template<> ::mavsdk::rpc::winch::WinchRelativeLengthControlRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchRelativeLengthControlRequest>(Arena*);
template<> ::mavsdk::rpc::winch::WinchRelativeLengthControlResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchRelativeLengthControlResponse>(Arena*);
template<> ::mavsdk::rpc::winch::WinchRelaxRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchRelaxRequest>(Arena*);
template<> ::mavsdk::rpc::winch::WinchRelaxResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchRelaxResponse>(Arena*);
template<> ::mavsdk::rpc::winch::WinchResult* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(Arena*);
template<> ::mavsdk::rpc::winch::WinchRetractRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchRetractRequest>(Arena*);
template<> ::mavsdk::rpc::winch::WinchRetractResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::winch::WinchRetractResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace winch {

enum WinchResult_Result : int {
  WinchResult_Result_RESULT_UNKNOWN = 0,
  WinchResult_Result_RESULT_SUCCESS = 1,
  WinchResult_Result_RESULT_NO_SYSTEM = 2,
  WinchResult_Result_RESULT_CONNECTION_ERROR = 3,
  WinchResult_Result_RESULT_BUSY = 4,
  WinchResult_Result_RESULT_COMMAND_DENIED = 5,
  WinchResult_Result_RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN = 6,
  WinchResult_Result_RESULT_COMMAND_DENIED_NOT_LANDED = 7,
  WinchResult_Result_RESULT_TIMEOUT = 8,
  WinchResult_Result_RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN = 9,
  WinchResult_Result_RESULT_NO_VTOL_TRANSITION_SUPPORT = 10,
  WinchResult_Result_RESULT_PARAMETER_ERROR = 11,
  WinchResult_Result_RESULT_UNSUPPORTED = 12,
  WinchResult_Result_RESULT_FAILED = 13,
  WinchResult_Result_WinchResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WinchResult_Result_WinchResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WinchResult_Result_IsValid(int value);
constexpr WinchResult_Result WinchResult_Result_Result_MIN = WinchResult_Result_RESULT_UNKNOWN;
constexpr WinchResult_Result WinchResult_Result_Result_MAX = WinchResult_Result_RESULT_FAILED;
constexpr int WinchResult_Result_Result_ARRAYSIZE = WinchResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WinchResult_Result_descriptor();
template<typename T>
inline const std::string& WinchResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WinchResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WinchResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WinchResult_Result_descriptor(), enum_t_value);
}
inline bool WinchResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WinchResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WinchResult_Result>(
    WinchResult_Result_descriptor(), name, value);
}
enum WinchAction : int {
  WINCH_ACTION_RELAXED = 0,
  WINCH_ACTION_RELATIVE_LENGTH_CONTROL = 1,
  WINCH_ACTION_RATE_CONTROL = 2,
  WINCH_ACTION_LOCK = 3,
  WINCH_ACTION_DELIVER = 4,
  WINCH_ACTION_HOLD = 5,
  WINCH_ACTION_RETRACT = 6,
  WINCH_ACTION_LOAD_LINE = 7,
  WINCH_ACTION_ABANDON_LINE = 8,
  WINCH_ACTION_LOAD_PAYLOAD = 9,
  WinchAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WinchAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WinchAction_IsValid(int value);
constexpr WinchAction WinchAction_MIN = WINCH_ACTION_RELAXED;
constexpr WinchAction WinchAction_MAX = WINCH_ACTION_LOAD_PAYLOAD;
constexpr int WinchAction_ARRAYSIZE = WinchAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WinchAction_descriptor();
template<typename T>
inline const std::string& WinchAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WinchAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WinchAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WinchAction_descriptor(), enum_t_value);
}
inline bool WinchAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WinchAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WinchAction>(
    WinchAction_descriptor(), name, value);
}
// ===================================================================

class WinchRelaxRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchRelaxRequest) */ {
 public:
  inline WinchRelaxRequest() : WinchRelaxRequest(nullptr) {}
  ~WinchRelaxRequest() override;
  explicit PROTOBUF_CONSTEXPR WinchRelaxRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchRelaxRequest(const WinchRelaxRequest& from);
  WinchRelaxRequest(WinchRelaxRequest&& from) noexcept
    : WinchRelaxRequest() {
    *this = ::std::move(from);
  }

  inline WinchRelaxRequest& operator=(const WinchRelaxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchRelaxRequest& operator=(WinchRelaxRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchRelaxRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchRelaxRequest* internal_default_instance() {
    return reinterpret_cast<const WinchRelaxRequest*>(
               &_WinchRelaxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WinchRelaxRequest& a, WinchRelaxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchRelaxRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchRelaxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchRelaxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchRelaxRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchRelaxRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchRelaxRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchRelaxRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchRelaxRequest";
  }
  protected:
  explicit WinchRelaxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchRelaxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchRelaxResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchRelaxResponse) */ {
 public:
  inline WinchRelaxResponse() : WinchRelaxResponse(nullptr) {}
  ~WinchRelaxResponse() override;
  explicit PROTOBUF_CONSTEXPR WinchRelaxResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchRelaxResponse(const WinchRelaxResponse& from);
  WinchRelaxResponse(WinchRelaxResponse&& from) noexcept
    : WinchRelaxResponse() {
    *this = ::std::move(from);
  }

  inline WinchRelaxResponse& operator=(const WinchRelaxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchRelaxResponse& operator=(WinchRelaxResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchRelaxResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchRelaxResponse* internal_default_instance() {
    return reinterpret_cast<const WinchRelaxResponse*>(
               &_WinchRelaxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WinchRelaxResponse& a, WinchRelaxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchRelaxResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchRelaxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchRelaxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchRelaxResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchRelaxResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchRelaxResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchRelaxResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchRelaxResponse";
  }
  protected:
  explicit WinchRelaxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::winch::WinchResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_action_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_action_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::winch::WinchResult* action_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchRelaxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchRelativeLengthControlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchRelativeLengthControlRequest) */ {
 public:
  inline WinchRelativeLengthControlRequest() : WinchRelativeLengthControlRequest(nullptr) {}
  ~WinchRelativeLengthControlRequest() override;
  explicit PROTOBUF_CONSTEXPR WinchRelativeLengthControlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchRelativeLengthControlRequest(const WinchRelativeLengthControlRequest& from);
  WinchRelativeLengthControlRequest(WinchRelativeLengthControlRequest&& from) noexcept
    : WinchRelativeLengthControlRequest() {
    *this = ::std::move(from);
  }

  inline WinchRelativeLengthControlRequest& operator=(const WinchRelativeLengthControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchRelativeLengthControlRequest& operator=(WinchRelativeLengthControlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchRelativeLengthControlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchRelativeLengthControlRequest* internal_default_instance() {
    return reinterpret_cast<const WinchRelativeLengthControlRequest*>(
               &_WinchRelativeLengthControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WinchRelativeLengthControlRequest& a, WinchRelativeLengthControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchRelativeLengthControlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchRelativeLengthControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchRelativeLengthControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchRelativeLengthControlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchRelativeLengthControlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchRelativeLengthControlRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchRelativeLengthControlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchRelativeLengthControlRequest";
  }
  protected:
  explicit WinchRelativeLengthControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
    kLengthFieldNumber = 2,
    kRateFieldNumber = 3,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // float length = 2;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // float rate = 3;
  void clear_rate();
  float rate() const;
  void set_rate(float value);
  private:
  float _internal_rate() const;
  void _internal_set_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchRelativeLengthControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  float length_;
  float rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchRelativeLengthControlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchRelativeLengthControlResponse) */ {
 public:
  inline WinchRelativeLengthControlResponse() : WinchRelativeLengthControlResponse(nullptr) {}
  ~WinchRelativeLengthControlResponse() override;
  explicit PROTOBUF_CONSTEXPR WinchRelativeLengthControlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchRelativeLengthControlResponse(const WinchRelativeLengthControlResponse& from);
  WinchRelativeLengthControlResponse(WinchRelativeLengthControlResponse&& from) noexcept
    : WinchRelativeLengthControlResponse() {
    *this = ::std::move(from);
  }

  inline WinchRelativeLengthControlResponse& operator=(const WinchRelativeLengthControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchRelativeLengthControlResponse& operator=(WinchRelativeLengthControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchRelativeLengthControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchRelativeLengthControlResponse* internal_default_instance() {
    return reinterpret_cast<const WinchRelativeLengthControlResponse*>(
               &_WinchRelativeLengthControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WinchRelativeLengthControlResponse& a, WinchRelativeLengthControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchRelativeLengthControlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchRelativeLengthControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchRelativeLengthControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchRelativeLengthControlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchRelativeLengthControlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchRelativeLengthControlResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchRelativeLengthControlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchRelativeLengthControlResponse";
  }
  protected:
  explicit WinchRelativeLengthControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::winch::WinchResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_action_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_action_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::winch::WinchResult* action_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchRelativeLengthControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchRateControlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchRateControlRequest) */ {
 public:
  inline WinchRateControlRequest() : WinchRateControlRequest(nullptr) {}
  ~WinchRateControlRequest() override;
  explicit PROTOBUF_CONSTEXPR WinchRateControlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchRateControlRequest(const WinchRateControlRequest& from);
  WinchRateControlRequest(WinchRateControlRequest&& from) noexcept
    : WinchRateControlRequest() {
    *this = ::std::move(from);
  }

  inline WinchRateControlRequest& operator=(const WinchRateControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchRateControlRequest& operator=(WinchRateControlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchRateControlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchRateControlRequest* internal_default_instance() {
    return reinterpret_cast<const WinchRateControlRequest*>(
               &_WinchRateControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WinchRateControlRequest& a, WinchRateControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchRateControlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchRateControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchRateControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchRateControlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchRateControlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchRateControlRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchRateControlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchRateControlRequest";
  }
  protected:
  explicit WinchRateControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
    kRateFieldNumber = 2,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // float rate = 2;
  void clear_rate();
  float rate() const;
  void set_rate(float value);
  private:
  float _internal_rate() const;
  void _internal_set_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchRateControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  float rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchRateControlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchRateControlResponse) */ {
 public:
  inline WinchRateControlResponse() : WinchRateControlResponse(nullptr) {}
  ~WinchRateControlResponse() override;
  explicit PROTOBUF_CONSTEXPR WinchRateControlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchRateControlResponse(const WinchRateControlResponse& from);
  WinchRateControlResponse(WinchRateControlResponse&& from) noexcept
    : WinchRateControlResponse() {
    *this = ::std::move(from);
  }

  inline WinchRateControlResponse& operator=(const WinchRateControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchRateControlResponse& operator=(WinchRateControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchRateControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchRateControlResponse* internal_default_instance() {
    return reinterpret_cast<const WinchRateControlResponse*>(
               &_WinchRateControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WinchRateControlResponse& a, WinchRateControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchRateControlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchRateControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchRateControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchRateControlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchRateControlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchRateControlResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchRateControlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchRateControlResponse";
  }
  protected:
  explicit WinchRateControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::winch::WinchResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_action_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_action_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::winch::WinchResult* action_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchRateControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchLockRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchLockRequest) */ {
 public:
  inline WinchLockRequest() : WinchLockRequest(nullptr) {}
  ~WinchLockRequest() override;
  explicit PROTOBUF_CONSTEXPR WinchLockRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchLockRequest(const WinchLockRequest& from);
  WinchLockRequest(WinchLockRequest&& from) noexcept
    : WinchLockRequest() {
    *this = ::std::move(from);
  }

  inline WinchLockRequest& operator=(const WinchLockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchLockRequest& operator=(WinchLockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchLockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchLockRequest* internal_default_instance() {
    return reinterpret_cast<const WinchLockRequest*>(
               &_WinchLockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WinchLockRequest& a, WinchLockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchLockRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchLockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchLockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchLockRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchLockRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchLockRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchLockRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchLockRequest";
  }
  protected:
  explicit WinchLockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchLockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchLockResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchLockResponse) */ {
 public:
  inline WinchLockResponse() : WinchLockResponse(nullptr) {}
  ~WinchLockResponse() override;
  explicit PROTOBUF_CONSTEXPR WinchLockResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchLockResponse(const WinchLockResponse& from);
  WinchLockResponse(WinchLockResponse&& from) noexcept
    : WinchLockResponse() {
    *this = ::std::move(from);
  }

  inline WinchLockResponse& operator=(const WinchLockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchLockResponse& operator=(WinchLockResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchLockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchLockResponse* internal_default_instance() {
    return reinterpret_cast<const WinchLockResponse*>(
               &_WinchLockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WinchLockResponse& a, WinchLockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchLockResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchLockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchLockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchLockResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchLockResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchLockResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchLockResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchLockResponse";
  }
  protected:
  explicit WinchLockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::winch::WinchResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_action_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_action_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::winch::WinchResult* action_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchLockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchDeliverRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchDeliverRequest) */ {
 public:
  inline WinchDeliverRequest() : WinchDeliverRequest(nullptr) {}
  ~WinchDeliverRequest() override;
  explicit PROTOBUF_CONSTEXPR WinchDeliverRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchDeliverRequest(const WinchDeliverRequest& from);
  WinchDeliverRequest(WinchDeliverRequest&& from) noexcept
    : WinchDeliverRequest() {
    *this = ::std::move(from);
  }

  inline WinchDeliverRequest& operator=(const WinchDeliverRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchDeliverRequest& operator=(WinchDeliverRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchDeliverRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchDeliverRequest* internal_default_instance() {
    return reinterpret_cast<const WinchDeliverRequest*>(
               &_WinchDeliverRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WinchDeliverRequest& a, WinchDeliverRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchDeliverRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchDeliverRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchDeliverRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchDeliverRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchDeliverRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchDeliverRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchDeliverRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchDeliverRequest";
  }
  protected:
  explicit WinchDeliverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchDeliverRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchDeliverResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchDeliverResponse) */ {
 public:
  inline WinchDeliverResponse() : WinchDeliverResponse(nullptr) {}
  ~WinchDeliverResponse() override;
  explicit PROTOBUF_CONSTEXPR WinchDeliverResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchDeliverResponse(const WinchDeliverResponse& from);
  WinchDeliverResponse(WinchDeliverResponse&& from) noexcept
    : WinchDeliverResponse() {
    *this = ::std::move(from);
  }

  inline WinchDeliverResponse& operator=(const WinchDeliverResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchDeliverResponse& operator=(WinchDeliverResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchDeliverResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchDeliverResponse* internal_default_instance() {
    return reinterpret_cast<const WinchDeliverResponse*>(
               &_WinchDeliverResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WinchDeliverResponse& a, WinchDeliverResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchDeliverResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchDeliverResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchDeliverResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchDeliverResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchDeliverResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchDeliverResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchDeliverResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchDeliverResponse";
  }
  protected:
  explicit WinchDeliverResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::winch::WinchResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_action_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_action_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::winch::WinchResult* action_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchDeliverResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchHoldRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchHoldRequest) */ {
 public:
  inline WinchHoldRequest() : WinchHoldRequest(nullptr) {}
  ~WinchHoldRequest() override;
  explicit PROTOBUF_CONSTEXPR WinchHoldRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchHoldRequest(const WinchHoldRequest& from);
  WinchHoldRequest(WinchHoldRequest&& from) noexcept
    : WinchHoldRequest() {
    *this = ::std::move(from);
  }

  inline WinchHoldRequest& operator=(const WinchHoldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchHoldRequest& operator=(WinchHoldRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchHoldRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchHoldRequest* internal_default_instance() {
    return reinterpret_cast<const WinchHoldRequest*>(
               &_WinchHoldRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(WinchHoldRequest& a, WinchHoldRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchHoldRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchHoldRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchHoldRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchHoldRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchHoldRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchHoldRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchHoldRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchHoldRequest";
  }
  protected:
  explicit WinchHoldRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchHoldRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchHoldResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchHoldResponse) */ {
 public:
  inline WinchHoldResponse() : WinchHoldResponse(nullptr) {}
  ~WinchHoldResponse() override;
  explicit PROTOBUF_CONSTEXPR WinchHoldResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchHoldResponse(const WinchHoldResponse& from);
  WinchHoldResponse(WinchHoldResponse&& from) noexcept
    : WinchHoldResponse() {
    *this = ::std::move(from);
  }

  inline WinchHoldResponse& operator=(const WinchHoldResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchHoldResponse& operator=(WinchHoldResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchHoldResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchHoldResponse* internal_default_instance() {
    return reinterpret_cast<const WinchHoldResponse*>(
               &_WinchHoldResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(WinchHoldResponse& a, WinchHoldResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchHoldResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchHoldResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchHoldResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchHoldResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchHoldResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchHoldResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchHoldResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchHoldResponse";
  }
  protected:
  explicit WinchHoldResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::winch::WinchResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_action_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_action_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::winch::WinchResult* action_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchHoldResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchRetractRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchRetractRequest) */ {
 public:
  inline WinchRetractRequest() : WinchRetractRequest(nullptr) {}
  ~WinchRetractRequest() override;
  explicit PROTOBUF_CONSTEXPR WinchRetractRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchRetractRequest(const WinchRetractRequest& from);
  WinchRetractRequest(WinchRetractRequest&& from) noexcept
    : WinchRetractRequest() {
    *this = ::std::move(from);
  }

  inline WinchRetractRequest& operator=(const WinchRetractRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchRetractRequest& operator=(WinchRetractRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchRetractRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchRetractRequest* internal_default_instance() {
    return reinterpret_cast<const WinchRetractRequest*>(
               &_WinchRetractRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(WinchRetractRequest& a, WinchRetractRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchRetractRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchRetractRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchRetractRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchRetractRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchRetractRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchRetractRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchRetractRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchRetractRequest";
  }
  protected:
  explicit WinchRetractRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchRetractRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchRetractResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchRetractResponse) */ {
 public:
  inline WinchRetractResponse() : WinchRetractResponse(nullptr) {}
  ~WinchRetractResponse() override;
  explicit PROTOBUF_CONSTEXPR WinchRetractResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchRetractResponse(const WinchRetractResponse& from);
  WinchRetractResponse(WinchRetractResponse&& from) noexcept
    : WinchRetractResponse() {
    *this = ::std::move(from);
  }

  inline WinchRetractResponse& operator=(const WinchRetractResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchRetractResponse& operator=(WinchRetractResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchRetractResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchRetractResponse* internal_default_instance() {
    return reinterpret_cast<const WinchRetractResponse*>(
               &_WinchRetractResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(WinchRetractResponse& a, WinchRetractResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchRetractResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchRetractResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchRetractResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchRetractResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchRetractResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchRetractResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchRetractResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchRetractResponse";
  }
  protected:
  explicit WinchRetractResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::winch::WinchResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_action_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_action_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::winch::WinchResult* action_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchRetractResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchLoadLineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchLoadLineRequest) */ {
 public:
  inline WinchLoadLineRequest() : WinchLoadLineRequest(nullptr) {}
  ~WinchLoadLineRequest() override;
  explicit PROTOBUF_CONSTEXPR WinchLoadLineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchLoadLineRequest(const WinchLoadLineRequest& from);
  WinchLoadLineRequest(WinchLoadLineRequest&& from) noexcept
    : WinchLoadLineRequest() {
    *this = ::std::move(from);
  }

  inline WinchLoadLineRequest& operator=(const WinchLoadLineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchLoadLineRequest& operator=(WinchLoadLineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchLoadLineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchLoadLineRequest* internal_default_instance() {
    return reinterpret_cast<const WinchLoadLineRequest*>(
               &_WinchLoadLineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(WinchLoadLineRequest& a, WinchLoadLineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchLoadLineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchLoadLineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchLoadLineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchLoadLineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchLoadLineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchLoadLineRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchLoadLineRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchLoadLineRequest";
  }
  protected:
  explicit WinchLoadLineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchLoadLineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchLoadLineResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchLoadLineResponse) */ {
 public:
  inline WinchLoadLineResponse() : WinchLoadLineResponse(nullptr) {}
  ~WinchLoadLineResponse() override;
  explicit PROTOBUF_CONSTEXPR WinchLoadLineResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchLoadLineResponse(const WinchLoadLineResponse& from);
  WinchLoadLineResponse(WinchLoadLineResponse&& from) noexcept
    : WinchLoadLineResponse() {
    *this = ::std::move(from);
  }

  inline WinchLoadLineResponse& operator=(const WinchLoadLineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchLoadLineResponse& operator=(WinchLoadLineResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchLoadLineResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchLoadLineResponse* internal_default_instance() {
    return reinterpret_cast<const WinchLoadLineResponse*>(
               &_WinchLoadLineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(WinchLoadLineResponse& a, WinchLoadLineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchLoadLineResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchLoadLineResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchLoadLineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchLoadLineResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchLoadLineResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchLoadLineResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchLoadLineResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchLoadLineResponse";
  }
  protected:
  explicit WinchLoadLineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::winch::WinchResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_action_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_action_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::winch::WinchResult* action_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchLoadLineResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchAbandonLineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchAbandonLineRequest) */ {
 public:
  inline WinchAbandonLineRequest() : WinchAbandonLineRequest(nullptr) {}
  ~WinchAbandonLineRequest() override;
  explicit PROTOBUF_CONSTEXPR WinchAbandonLineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchAbandonLineRequest(const WinchAbandonLineRequest& from);
  WinchAbandonLineRequest(WinchAbandonLineRequest&& from) noexcept
    : WinchAbandonLineRequest() {
    *this = ::std::move(from);
  }

  inline WinchAbandonLineRequest& operator=(const WinchAbandonLineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchAbandonLineRequest& operator=(WinchAbandonLineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchAbandonLineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchAbandonLineRequest* internal_default_instance() {
    return reinterpret_cast<const WinchAbandonLineRequest*>(
               &_WinchAbandonLineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(WinchAbandonLineRequest& a, WinchAbandonLineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchAbandonLineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchAbandonLineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchAbandonLineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchAbandonLineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchAbandonLineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchAbandonLineRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchAbandonLineRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchAbandonLineRequest";
  }
  protected:
  explicit WinchAbandonLineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchAbandonLineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchAbandonLineResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchAbandonLineResponse) */ {
 public:
  inline WinchAbandonLineResponse() : WinchAbandonLineResponse(nullptr) {}
  ~WinchAbandonLineResponse() override;
  explicit PROTOBUF_CONSTEXPR WinchAbandonLineResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchAbandonLineResponse(const WinchAbandonLineResponse& from);
  WinchAbandonLineResponse(WinchAbandonLineResponse&& from) noexcept
    : WinchAbandonLineResponse() {
    *this = ::std::move(from);
  }

  inline WinchAbandonLineResponse& operator=(const WinchAbandonLineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchAbandonLineResponse& operator=(WinchAbandonLineResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchAbandonLineResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchAbandonLineResponse* internal_default_instance() {
    return reinterpret_cast<const WinchAbandonLineResponse*>(
               &_WinchAbandonLineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(WinchAbandonLineResponse& a, WinchAbandonLineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchAbandonLineResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchAbandonLineResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchAbandonLineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchAbandonLineResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchAbandonLineResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchAbandonLineResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchAbandonLineResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchAbandonLineResponse";
  }
  protected:
  explicit WinchAbandonLineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::winch::WinchResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_action_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_action_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::winch::WinchResult* action_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchAbandonLineResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchLoadPayloadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchLoadPayloadRequest) */ {
 public:
  inline WinchLoadPayloadRequest() : WinchLoadPayloadRequest(nullptr) {}
  ~WinchLoadPayloadRequest() override;
  explicit PROTOBUF_CONSTEXPR WinchLoadPayloadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchLoadPayloadRequest(const WinchLoadPayloadRequest& from);
  WinchLoadPayloadRequest(WinchLoadPayloadRequest&& from) noexcept
    : WinchLoadPayloadRequest() {
    *this = ::std::move(from);
  }

  inline WinchLoadPayloadRequest& operator=(const WinchLoadPayloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchLoadPayloadRequest& operator=(WinchLoadPayloadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchLoadPayloadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchLoadPayloadRequest* internal_default_instance() {
    return reinterpret_cast<const WinchLoadPayloadRequest*>(
               &_WinchLoadPayloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(WinchLoadPayloadRequest& a, WinchLoadPayloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchLoadPayloadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchLoadPayloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchLoadPayloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchLoadPayloadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchLoadPayloadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchLoadPayloadRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchLoadPayloadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchLoadPayloadRequest";
  }
  protected:
  explicit WinchLoadPayloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchLoadPayloadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchLoadPayloadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchLoadPayloadResponse) */ {
 public:
  inline WinchLoadPayloadResponse() : WinchLoadPayloadResponse(nullptr) {}
  ~WinchLoadPayloadResponse() override;
  explicit PROTOBUF_CONSTEXPR WinchLoadPayloadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchLoadPayloadResponse(const WinchLoadPayloadResponse& from);
  WinchLoadPayloadResponse(WinchLoadPayloadResponse&& from) noexcept
    : WinchLoadPayloadResponse() {
    *this = ::std::move(from);
  }

  inline WinchLoadPayloadResponse& operator=(const WinchLoadPayloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchLoadPayloadResponse& operator=(WinchLoadPayloadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchLoadPayloadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchLoadPayloadResponse* internal_default_instance() {
    return reinterpret_cast<const WinchLoadPayloadResponse*>(
               &_WinchLoadPayloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(WinchLoadPayloadResponse& a, WinchLoadPayloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchLoadPayloadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchLoadPayloadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchLoadPayloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchLoadPayloadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchLoadPayloadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchLoadPayloadResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchLoadPayloadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchLoadPayloadResponse";
  }
  protected:
  explicit WinchLoadPayloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.winch.WinchResult action_result = 1;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::mavsdk::rpc::winch::WinchResult& action_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::winch::WinchResult* release_action_result();
  ::mavsdk::rpc::winch::WinchResult* mutable_action_result();
  void set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result);
  private:
  const ::mavsdk::rpc::winch::WinchResult& _internal_action_result() const;
  ::mavsdk::rpc::winch::WinchResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::mavsdk::rpc::winch::WinchResult* action_result);
  ::mavsdk::rpc::winch::WinchResult* unsafe_arena_release_action_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchLoadPayloadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::winch::WinchResult* action_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// -------------------------------------------------------------------

class WinchResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.winch.WinchResult) */ {
 public:
  inline WinchResult() : WinchResult(nullptr) {}
  ~WinchResult() override;
  explicit PROTOBUF_CONSTEXPR WinchResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WinchResult(const WinchResult& from);
  WinchResult(WinchResult&& from) noexcept
    : WinchResult() {
    *this = ::std::move(from);
  }

  inline WinchResult& operator=(const WinchResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinchResult& operator=(WinchResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinchResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinchResult* internal_default_instance() {
    return reinterpret_cast<const WinchResult*>(
               &_WinchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(WinchResult& a, WinchResult& b) {
    a.Swap(&b);
  }
  inline void Swap(WinchResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinchResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinchResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WinchResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WinchResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WinchResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WinchResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.winch.WinchResult";
  }
  protected:
  explicit WinchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WinchResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    WinchResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    WinchResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM =
    WinchResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR =
    WinchResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_BUSY =
    WinchResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_COMMAND_DENIED =
    WinchResult_Result_RESULT_COMMAND_DENIED;
  static constexpr Result RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN =
    WinchResult_Result_RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN;
  static constexpr Result RESULT_COMMAND_DENIED_NOT_LANDED =
    WinchResult_Result_RESULT_COMMAND_DENIED_NOT_LANDED;
  static constexpr Result RESULT_TIMEOUT =
    WinchResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN =
    WinchResult_Result_RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN;
  static constexpr Result RESULT_NO_VTOL_TRANSITION_SUPPORT =
    WinchResult_Result_RESULT_NO_VTOL_TRANSITION_SUPPORT;
  static constexpr Result RESULT_PARAMETER_ERROR =
    WinchResult_Result_RESULT_PARAMETER_ERROR;
  static constexpr Result RESULT_UNSUPPORTED =
    WinchResult_Result_RESULT_UNSUPPORTED;
  static constexpr Result RESULT_FAILED =
    WinchResult_Result_RESULT_FAILED;
  static inline bool Result_IsValid(int value) {
    return WinchResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    WinchResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    WinchResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    WinchResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return WinchResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return WinchResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return WinchResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.winch.WinchResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::winch::WinchResult_Result result() const;
  void set_result(::mavsdk::rpc::winch::WinchResult_Result value);
  private:
  ::mavsdk::rpc::winch::WinchResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::winch::WinchResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.winch.WinchResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_winch_2fwinch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WinchRelaxRequest

// uint32 instance = 1;
inline void WinchRelaxRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t WinchRelaxRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t WinchRelaxRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchRelaxRequest.instance)
  return _internal_instance();
}
inline void WinchRelaxRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void WinchRelaxRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.WinchRelaxRequest.instance)
}

// -------------------------------------------------------------------

// WinchRelaxResponse

// .mavsdk.rpc.winch.WinchResult action_result = 1;
inline bool WinchRelaxResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool WinchRelaxResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void WinchRelaxResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchRelaxResponse::_internal_action_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchRelaxResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchRelaxResponse.action_result)
  return _internal_action_result();
}
inline void WinchRelaxResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::winch::WinchResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.WinchRelaxResponse.action_result)
}
inline ::mavsdk::rpc::winch::WinchResult* WinchRelaxResponse::release_action_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchRelaxResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.WinchRelaxResponse.action_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchRelaxResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchRelaxResponse::mutable_action_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.WinchRelaxResponse.action_result)
  return _msg;
}
inline void WinchRelaxResponse::set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.WinchRelaxResponse.action_result)
}

// -------------------------------------------------------------------

// WinchRelativeLengthControlRequest

// uint32 instance = 1;
inline void WinchRelativeLengthControlRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t WinchRelativeLengthControlRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t WinchRelativeLengthControlRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchRelativeLengthControlRequest.instance)
  return _internal_instance();
}
inline void WinchRelativeLengthControlRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void WinchRelativeLengthControlRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.WinchRelativeLengthControlRequest.instance)
}

// float length = 2;
inline void WinchRelativeLengthControlRequest::clear_length() {
  length_ = 0;
}
inline float WinchRelativeLengthControlRequest::_internal_length() const {
  return length_;
}
inline float WinchRelativeLengthControlRequest::length() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchRelativeLengthControlRequest.length)
  return _internal_length();
}
inline void WinchRelativeLengthControlRequest::_internal_set_length(float value) {
  
  length_ = value;
}
inline void WinchRelativeLengthControlRequest::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.WinchRelativeLengthControlRequest.length)
}

// float rate = 3;
inline void WinchRelativeLengthControlRequest::clear_rate() {
  rate_ = 0;
}
inline float WinchRelativeLengthControlRequest::_internal_rate() const {
  return rate_;
}
inline float WinchRelativeLengthControlRequest::rate() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchRelativeLengthControlRequest.rate)
  return _internal_rate();
}
inline void WinchRelativeLengthControlRequest::_internal_set_rate(float value) {
  
  rate_ = value;
}
inline void WinchRelativeLengthControlRequest::set_rate(float value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.WinchRelativeLengthControlRequest.rate)
}

// -------------------------------------------------------------------

// WinchRelativeLengthControlResponse

// .mavsdk.rpc.winch.WinchResult action_result = 1;
inline bool WinchRelativeLengthControlResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool WinchRelativeLengthControlResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void WinchRelativeLengthControlResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchRelativeLengthControlResponse::_internal_action_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchRelativeLengthControlResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchRelativeLengthControlResponse.action_result)
  return _internal_action_result();
}
inline void WinchRelativeLengthControlResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::winch::WinchResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.WinchRelativeLengthControlResponse.action_result)
}
inline ::mavsdk::rpc::winch::WinchResult* WinchRelativeLengthControlResponse::release_action_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchRelativeLengthControlResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.WinchRelativeLengthControlResponse.action_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchRelativeLengthControlResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchRelativeLengthControlResponse::mutable_action_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.WinchRelativeLengthControlResponse.action_result)
  return _msg;
}
inline void WinchRelativeLengthControlResponse::set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.WinchRelativeLengthControlResponse.action_result)
}

// -------------------------------------------------------------------

// WinchRateControlRequest

// uint32 instance = 1;
inline void WinchRateControlRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t WinchRateControlRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t WinchRateControlRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchRateControlRequest.instance)
  return _internal_instance();
}
inline void WinchRateControlRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void WinchRateControlRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.WinchRateControlRequest.instance)
}

// float rate = 2;
inline void WinchRateControlRequest::clear_rate() {
  rate_ = 0;
}
inline float WinchRateControlRequest::_internal_rate() const {
  return rate_;
}
inline float WinchRateControlRequest::rate() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchRateControlRequest.rate)
  return _internal_rate();
}
inline void WinchRateControlRequest::_internal_set_rate(float value) {
  
  rate_ = value;
}
inline void WinchRateControlRequest::set_rate(float value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.WinchRateControlRequest.rate)
}

// -------------------------------------------------------------------

// WinchRateControlResponse

// .mavsdk.rpc.winch.WinchResult action_result = 1;
inline bool WinchRateControlResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool WinchRateControlResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void WinchRateControlResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchRateControlResponse::_internal_action_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchRateControlResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchRateControlResponse.action_result)
  return _internal_action_result();
}
inline void WinchRateControlResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::winch::WinchResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.WinchRateControlResponse.action_result)
}
inline ::mavsdk::rpc::winch::WinchResult* WinchRateControlResponse::release_action_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchRateControlResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.WinchRateControlResponse.action_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchRateControlResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchRateControlResponse::mutable_action_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.WinchRateControlResponse.action_result)
  return _msg;
}
inline void WinchRateControlResponse::set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.WinchRateControlResponse.action_result)
}

// -------------------------------------------------------------------

// WinchLockRequest

// uint32 instance = 1;
inline void WinchLockRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t WinchLockRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t WinchLockRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchLockRequest.instance)
  return _internal_instance();
}
inline void WinchLockRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void WinchLockRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.WinchLockRequest.instance)
}

// -------------------------------------------------------------------

// WinchLockResponse

// .mavsdk.rpc.winch.WinchResult action_result = 1;
inline bool WinchLockResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool WinchLockResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void WinchLockResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchLockResponse::_internal_action_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchLockResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchLockResponse.action_result)
  return _internal_action_result();
}
inline void WinchLockResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::winch::WinchResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.WinchLockResponse.action_result)
}
inline ::mavsdk::rpc::winch::WinchResult* WinchLockResponse::release_action_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchLockResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.WinchLockResponse.action_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchLockResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchLockResponse::mutable_action_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.WinchLockResponse.action_result)
  return _msg;
}
inline void WinchLockResponse::set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.WinchLockResponse.action_result)
}

// -------------------------------------------------------------------

// WinchDeliverRequest

// uint32 instance = 1;
inline void WinchDeliverRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t WinchDeliverRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t WinchDeliverRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchDeliverRequest.instance)
  return _internal_instance();
}
inline void WinchDeliverRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void WinchDeliverRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.WinchDeliverRequest.instance)
}

// -------------------------------------------------------------------

// WinchDeliverResponse

// .mavsdk.rpc.winch.WinchResult action_result = 1;
inline bool WinchDeliverResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool WinchDeliverResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void WinchDeliverResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchDeliverResponse::_internal_action_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchDeliverResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchDeliverResponse.action_result)
  return _internal_action_result();
}
inline void WinchDeliverResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::winch::WinchResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.WinchDeliverResponse.action_result)
}
inline ::mavsdk::rpc::winch::WinchResult* WinchDeliverResponse::release_action_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchDeliverResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.WinchDeliverResponse.action_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchDeliverResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchDeliverResponse::mutable_action_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.WinchDeliverResponse.action_result)
  return _msg;
}
inline void WinchDeliverResponse::set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.WinchDeliverResponse.action_result)
}

// -------------------------------------------------------------------

// WinchHoldRequest

// uint32 instance = 1;
inline void WinchHoldRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t WinchHoldRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t WinchHoldRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchHoldRequest.instance)
  return _internal_instance();
}
inline void WinchHoldRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void WinchHoldRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.WinchHoldRequest.instance)
}

// -------------------------------------------------------------------

// WinchHoldResponse

// .mavsdk.rpc.winch.WinchResult action_result = 1;
inline bool WinchHoldResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool WinchHoldResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void WinchHoldResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchHoldResponse::_internal_action_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchHoldResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchHoldResponse.action_result)
  return _internal_action_result();
}
inline void WinchHoldResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::winch::WinchResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.WinchHoldResponse.action_result)
}
inline ::mavsdk::rpc::winch::WinchResult* WinchHoldResponse::release_action_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchHoldResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.WinchHoldResponse.action_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchHoldResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchHoldResponse::mutable_action_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.WinchHoldResponse.action_result)
  return _msg;
}
inline void WinchHoldResponse::set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.WinchHoldResponse.action_result)
}

// -------------------------------------------------------------------

// WinchRetractRequest

// uint32 instance = 1;
inline void WinchRetractRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t WinchRetractRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t WinchRetractRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchRetractRequest.instance)
  return _internal_instance();
}
inline void WinchRetractRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void WinchRetractRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.WinchRetractRequest.instance)
}

// -------------------------------------------------------------------

// WinchRetractResponse

// .mavsdk.rpc.winch.WinchResult action_result = 1;
inline bool WinchRetractResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool WinchRetractResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void WinchRetractResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchRetractResponse::_internal_action_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchRetractResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchRetractResponse.action_result)
  return _internal_action_result();
}
inline void WinchRetractResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::winch::WinchResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.WinchRetractResponse.action_result)
}
inline ::mavsdk::rpc::winch::WinchResult* WinchRetractResponse::release_action_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchRetractResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.WinchRetractResponse.action_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchRetractResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchRetractResponse::mutable_action_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.WinchRetractResponse.action_result)
  return _msg;
}
inline void WinchRetractResponse::set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.WinchRetractResponse.action_result)
}

// -------------------------------------------------------------------

// WinchLoadLineRequest

// uint32 instance = 1;
inline void WinchLoadLineRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t WinchLoadLineRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t WinchLoadLineRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchLoadLineRequest.instance)
  return _internal_instance();
}
inline void WinchLoadLineRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void WinchLoadLineRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.WinchLoadLineRequest.instance)
}

// -------------------------------------------------------------------

// WinchLoadLineResponse

// .mavsdk.rpc.winch.WinchResult action_result = 1;
inline bool WinchLoadLineResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool WinchLoadLineResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void WinchLoadLineResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchLoadLineResponse::_internal_action_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchLoadLineResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchLoadLineResponse.action_result)
  return _internal_action_result();
}
inline void WinchLoadLineResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::winch::WinchResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.WinchLoadLineResponse.action_result)
}
inline ::mavsdk::rpc::winch::WinchResult* WinchLoadLineResponse::release_action_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchLoadLineResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.WinchLoadLineResponse.action_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchLoadLineResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchLoadLineResponse::mutable_action_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.WinchLoadLineResponse.action_result)
  return _msg;
}
inline void WinchLoadLineResponse::set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.WinchLoadLineResponse.action_result)
}

// -------------------------------------------------------------------

// WinchAbandonLineRequest

// uint32 instance = 1;
inline void WinchAbandonLineRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t WinchAbandonLineRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t WinchAbandonLineRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchAbandonLineRequest.instance)
  return _internal_instance();
}
inline void WinchAbandonLineRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void WinchAbandonLineRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.WinchAbandonLineRequest.instance)
}

// -------------------------------------------------------------------

// WinchAbandonLineResponse

// .mavsdk.rpc.winch.WinchResult action_result = 1;
inline bool WinchAbandonLineResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool WinchAbandonLineResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void WinchAbandonLineResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchAbandonLineResponse::_internal_action_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchAbandonLineResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchAbandonLineResponse.action_result)
  return _internal_action_result();
}
inline void WinchAbandonLineResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::winch::WinchResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.WinchAbandonLineResponse.action_result)
}
inline ::mavsdk::rpc::winch::WinchResult* WinchAbandonLineResponse::release_action_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchAbandonLineResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.WinchAbandonLineResponse.action_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchAbandonLineResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchAbandonLineResponse::mutable_action_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.WinchAbandonLineResponse.action_result)
  return _msg;
}
inline void WinchAbandonLineResponse::set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.WinchAbandonLineResponse.action_result)
}

// -------------------------------------------------------------------

// WinchLoadPayloadRequest

// uint32 instance = 1;
inline void WinchLoadPayloadRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t WinchLoadPayloadRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t WinchLoadPayloadRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchLoadPayloadRequest.instance)
  return _internal_instance();
}
inline void WinchLoadPayloadRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void WinchLoadPayloadRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.WinchLoadPayloadRequest.instance)
}

// -------------------------------------------------------------------

// WinchLoadPayloadResponse

// .mavsdk.rpc.winch.WinchResult action_result = 1;
inline bool WinchLoadPayloadResponse::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool WinchLoadPayloadResponse::has_action_result() const {
  return _internal_has_action_result();
}
inline void WinchLoadPayloadResponse::clear_action_result() {
  if (GetArenaForAllocation() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchLoadPayloadResponse::_internal_action_result() const {
  const ::mavsdk::rpc::winch::WinchResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::winch::WinchResult&>(
      ::mavsdk::rpc::winch::_WinchResult_default_instance_);
}
inline const ::mavsdk::rpc::winch::WinchResult& WinchLoadPayloadResponse::action_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchLoadPayloadResponse.action_result)
  return _internal_action_result();
}
inline void WinchLoadPayloadResponse::unsafe_arena_set_allocated_action_result(
    ::mavsdk::rpc::winch::WinchResult* action_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.winch.WinchLoadPayloadResponse.action_result)
}
inline ::mavsdk::rpc::winch::WinchResult* WinchLoadPayloadResponse::release_action_result() {
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchLoadPayloadResponse::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.WinchLoadPayloadResponse.action_result)
  
  ::mavsdk::rpc::winch::WinchResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchLoadPayloadResponse::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::winch::WinchResult>(GetArenaForAllocation());
    action_result_ = p;
  }
  return action_result_;
}
inline ::mavsdk::rpc::winch::WinchResult* WinchLoadPayloadResponse::mutable_action_result() {
  ::mavsdk::rpc::winch::WinchResult* _msg = _internal_mutable_action_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.WinchLoadPayloadResponse.action_result)
  return _msg;
}
inline void WinchLoadPayloadResponse::set_allocated_action_result(::mavsdk::rpc::winch::WinchResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.WinchLoadPayloadResponse.action_result)
}

// -------------------------------------------------------------------

// WinchResult

// .mavsdk.rpc.winch.WinchResult.Result result = 1;
inline void WinchResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::winch::WinchResult_Result WinchResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::winch::WinchResult_Result >(result_);
}
inline ::mavsdk::rpc::winch::WinchResult_Result WinchResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchResult.result)
  return _internal_result();
}
inline void WinchResult::_internal_set_result(::mavsdk::rpc::winch::WinchResult_Result value) {
  
  result_ = value;
}
inline void WinchResult::set_result(::mavsdk::rpc::winch::WinchResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.WinchResult.result)
}

// string result_str = 2;
inline void WinchResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& WinchResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.winch.WinchResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WinchResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.winch.WinchResult.result_str)
}
inline std::string* WinchResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.winch.WinchResult.result_str)
  return _s;
}
inline const std::string& WinchResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void WinchResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* WinchResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* WinchResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.winch.WinchResult.result_str)
  return result_str_.Release();
}
inline void WinchResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_str_.IsDefault()) {
    result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.winch.WinchResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace winch
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::winch::WinchResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::winch::WinchResult_Result>() {
  return ::mavsdk::rpc::winch::WinchResult_Result_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::winch::WinchAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::winch::WinchAction>() {
  return ::mavsdk::rpc::winch::WinchAction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_winch_2fwinch_2eproto
