// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: winch/winch.proto

#include "winch/winch.pb.h"
#include "winch/winch.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace winch {

static const char* WinchService_method_names[] = {
  "/mavsdk.rpc.winch.WinchService/WinchRelax",
  "/mavsdk.rpc.winch.WinchService/WinchRelativeLengthControl",
  "/mavsdk.rpc.winch.WinchService/WinchRateControl",
  "/mavsdk.rpc.winch.WinchService/WinchLock",
  "/mavsdk.rpc.winch.WinchService/WinchDeliver",
  "/mavsdk.rpc.winch.WinchService/WinchHold",
  "/mavsdk.rpc.winch.WinchService/WinchRetract",
  "/mavsdk.rpc.winch.WinchService/WinchLoadLine",
  "/mavsdk.rpc.winch.WinchService/WinchAbandonLine",
  "/mavsdk.rpc.winch.WinchService/WinchLoadPayload",
};

std::unique_ptr< WinchService::Stub> WinchService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WinchService::Stub> stub(new WinchService::Stub(channel, options));
  return stub;
}

WinchService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_WinchRelax_(WinchService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WinchRelativeLengthControl_(WinchService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WinchRateControl_(WinchService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WinchLock_(WinchService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WinchDeliver_(WinchService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WinchHold_(WinchService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WinchRetract_(WinchService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WinchLoadLine_(WinchService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WinchAbandonLine_(WinchService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WinchLoadPayload_(WinchService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WinchService::Stub::WinchRelax(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRelaxRequest& request, ::mavsdk::rpc::winch::WinchRelaxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::winch::WinchRelaxRequest, ::mavsdk::rpc::winch::WinchRelaxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WinchRelax_, context, request, response);
}

void WinchService::Stub::async::WinchRelax(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRelaxRequest* request, ::mavsdk::rpc::winch::WinchRelaxResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::winch::WinchRelaxRequest, ::mavsdk::rpc::winch::WinchRelaxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchRelax_, context, request, response, std::move(f));
}

void WinchService::Stub::async::WinchRelax(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRelaxRequest* request, ::mavsdk::rpc::winch::WinchRelaxResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchRelax_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchRelaxResponse>* WinchService::Stub::PrepareAsyncWinchRelaxRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRelaxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::winch::WinchRelaxResponse, ::mavsdk::rpc::winch::WinchRelaxRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WinchRelax_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchRelaxResponse>* WinchService::Stub::AsyncWinchRelaxRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRelaxRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWinchRelaxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WinchService::Stub::WinchRelativeLengthControl(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRelativeLengthControlRequest& request, ::mavsdk::rpc::winch::WinchRelativeLengthControlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::winch::WinchRelativeLengthControlRequest, ::mavsdk::rpc::winch::WinchRelativeLengthControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WinchRelativeLengthControl_, context, request, response);
}

void WinchService::Stub::async::WinchRelativeLengthControl(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRelativeLengthControlRequest* request, ::mavsdk::rpc::winch::WinchRelativeLengthControlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::winch::WinchRelativeLengthControlRequest, ::mavsdk::rpc::winch::WinchRelativeLengthControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchRelativeLengthControl_, context, request, response, std::move(f));
}

void WinchService::Stub::async::WinchRelativeLengthControl(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRelativeLengthControlRequest* request, ::mavsdk::rpc::winch::WinchRelativeLengthControlResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchRelativeLengthControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchRelativeLengthControlResponse>* WinchService::Stub::PrepareAsyncWinchRelativeLengthControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRelativeLengthControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::winch::WinchRelativeLengthControlResponse, ::mavsdk::rpc::winch::WinchRelativeLengthControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WinchRelativeLengthControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchRelativeLengthControlResponse>* WinchService::Stub::AsyncWinchRelativeLengthControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRelativeLengthControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWinchRelativeLengthControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WinchService::Stub::WinchRateControl(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRateControlRequest& request, ::mavsdk::rpc::winch::WinchRateControlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::winch::WinchRateControlRequest, ::mavsdk::rpc::winch::WinchRateControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WinchRateControl_, context, request, response);
}

void WinchService::Stub::async::WinchRateControl(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRateControlRequest* request, ::mavsdk::rpc::winch::WinchRateControlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::winch::WinchRateControlRequest, ::mavsdk::rpc::winch::WinchRateControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchRateControl_, context, request, response, std::move(f));
}

void WinchService::Stub::async::WinchRateControl(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRateControlRequest* request, ::mavsdk::rpc::winch::WinchRateControlResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchRateControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchRateControlResponse>* WinchService::Stub::PrepareAsyncWinchRateControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRateControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::winch::WinchRateControlResponse, ::mavsdk::rpc::winch::WinchRateControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WinchRateControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchRateControlResponse>* WinchService::Stub::AsyncWinchRateControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRateControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWinchRateControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WinchService::Stub::WinchLock(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchLockRequest& request, ::mavsdk::rpc::winch::WinchLockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::winch::WinchLockRequest, ::mavsdk::rpc::winch::WinchLockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WinchLock_, context, request, response);
}

void WinchService::Stub::async::WinchLock(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchLockRequest* request, ::mavsdk::rpc::winch::WinchLockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::winch::WinchLockRequest, ::mavsdk::rpc::winch::WinchLockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchLock_, context, request, response, std::move(f));
}

void WinchService::Stub::async::WinchLock(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchLockRequest* request, ::mavsdk::rpc::winch::WinchLockResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchLock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchLockResponse>* WinchService::Stub::PrepareAsyncWinchLockRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchLockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::winch::WinchLockResponse, ::mavsdk::rpc::winch::WinchLockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WinchLock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchLockResponse>* WinchService::Stub::AsyncWinchLockRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchLockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWinchLockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WinchService::Stub::WinchDeliver(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchDeliverRequest& request, ::mavsdk::rpc::winch::WinchDeliverResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::winch::WinchDeliverRequest, ::mavsdk::rpc::winch::WinchDeliverResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WinchDeliver_, context, request, response);
}

void WinchService::Stub::async::WinchDeliver(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchDeliverRequest* request, ::mavsdk::rpc::winch::WinchDeliverResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::winch::WinchDeliverRequest, ::mavsdk::rpc::winch::WinchDeliverResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchDeliver_, context, request, response, std::move(f));
}

void WinchService::Stub::async::WinchDeliver(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchDeliverRequest* request, ::mavsdk::rpc::winch::WinchDeliverResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchDeliver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchDeliverResponse>* WinchService::Stub::PrepareAsyncWinchDeliverRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchDeliverRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::winch::WinchDeliverResponse, ::mavsdk::rpc::winch::WinchDeliverRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WinchDeliver_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchDeliverResponse>* WinchService::Stub::AsyncWinchDeliverRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchDeliverRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWinchDeliverRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WinchService::Stub::WinchHold(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchHoldRequest& request, ::mavsdk::rpc::winch::WinchHoldResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::winch::WinchHoldRequest, ::mavsdk::rpc::winch::WinchHoldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WinchHold_, context, request, response);
}

void WinchService::Stub::async::WinchHold(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchHoldRequest* request, ::mavsdk::rpc::winch::WinchHoldResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::winch::WinchHoldRequest, ::mavsdk::rpc::winch::WinchHoldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchHold_, context, request, response, std::move(f));
}

void WinchService::Stub::async::WinchHold(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchHoldRequest* request, ::mavsdk::rpc::winch::WinchHoldResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchHold_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchHoldResponse>* WinchService::Stub::PrepareAsyncWinchHoldRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::winch::WinchHoldResponse, ::mavsdk::rpc::winch::WinchHoldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WinchHold_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchHoldResponse>* WinchService::Stub::AsyncWinchHoldRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchHoldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWinchHoldRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WinchService::Stub::WinchRetract(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRetractRequest& request, ::mavsdk::rpc::winch::WinchRetractResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::winch::WinchRetractRequest, ::mavsdk::rpc::winch::WinchRetractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WinchRetract_, context, request, response);
}

void WinchService::Stub::async::WinchRetract(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRetractRequest* request, ::mavsdk::rpc::winch::WinchRetractResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::winch::WinchRetractRequest, ::mavsdk::rpc::winch::WinchRetractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchRetract_, context, request, response, std::move(f));
}

void WinchService::Stub::async::WinchRetract(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRetractRequest* request, ::mavsdk::rpc::winch::WinchRetractResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchRetract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchRetractResponse>* WinchService::Stub::PrepareAsyncWinchRetractRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRetractRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::winch::WinchRetractResponse, ::mavsdk::rpc::winch::WinchRetractRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WinchRetract_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchRetractResponse>* WinchService::Stub::AsyncWinchRetractRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchRetractRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWinchRetractRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WinchService::Stub::WinchLoadLine(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchLoadLineRequest& request, ::mavsdk::rpc::winch::WinchLoadLineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::winch::WinchLoadLineRequest, ::mavsdk::rpc::winch::WinchLoadLineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WinchLoadLine_, context, request, response);
}

void WinchService::Stub::async::WinchLoadLine(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchLoadLineRequest* request, ::mavsdk::rpc::winch::WinchLoadLineResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::winch::WinchLoadLineRequest, ::mavsdk::rpc::winch::WinchLoadLineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchLoadLine_, context, request, response, std::move(f));
}

void WinchService::Stub::async::WinchLoadLine(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchLoadLineRequest* request, ::mavsdk::rpc::winch::WinchLoadLineResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchLoadLine_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchLoadLineResponse>* WinchService::Stub::PrepareAsyncWinchLoadLineRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchLoadLineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::winch::WinchLoadLineResponse, ::mavsdk::rpc::winch::WinchLoadLineRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WinchLoadLine_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchLoadLineResponse>* WinchService::Stub::AsyncWinchLoadLineRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchLoadLineRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWinchLoadLineRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WinchService::Stub::WinchAbandonLine(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchAbandonLineRequest& request, ::mavsdk::rpc::winch::WinchAbandonLineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::winch::WinchAbandonLineRequest, ::mavsdk::rpc::winch::WinchAbandonLineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WinchAbandonLine_, context, request, response);
}

void WinchService::Stub::async::WinchAbandonLine(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchAbandonLineRequest* request, ::mavsdk::rpc::winch::WinchAbandonLineResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::winch::WinchAbandonLineRequest, ::mavsdk::rpc::winch::WinchAbandonLineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchAbandonLine_, context, request, response, std::move(f));
}

void WinchService::Stub::async::WinchAbandonLine(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchAbandonLineRequest* request, ::mavsdk::rpc::winch::WinchAbandonLineResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchAbandonLine_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchAbandonLineResponse>* WinchService::Stub::PrepareAsyncWinchAbandonLineRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchAbandonLineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::winch::WinchAbandonLineResponse, ::mavsdk::rpc::winch::WinchAbandonLineRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WinchAbandonLine_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchAbandonLineResponse>* WinchService::Stub::AsyncWinchAbandonLineRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchAbandonLineRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWinchAbandonLineRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WinchService::Stub::WinchLoadPayload(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchLoadPayloadRequest& request, ::mavsdk::rpc::winch::WinchLoadPayloadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::winch::WinchLoadPayloadRequest, ::mavsdk::rpc::winch::WinchLoadPayloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WinchLoadPayload_, context, request, response);
}

void WinchService::Stub::async::WinchLoadPayload(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchLoadPayloadRequest* request, ::mavsdk::rpc::winch::WinchLoadPayloadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::winch::WinchLoadPayloadRequest, ::mavsdk::rpc::winch::WinchLoadPayloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchLoadPayload_, context, request, response, std::move(f));
}

void WinchService::Stub::async::WinchLoadPayload(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchLoadPayloadRequest* request, ::mavsdk::rpc::winch::WinchLoadPayloadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WinchLoadPayload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchLoadPayloadResponse>* WinchService::Stub::PrepareAsyncWinchLoadPayloadRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchLoadPayloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::winch::WinchLoadPayloadResponse, ::mavsdk::rpc::winch::WinchLoadPayloadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WinchLoadPayload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::winch::WinchLoadPayloadResponse>* WinchService::Stub::AsyncWinchLoadPayloadRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::winch::WinchLoadPayloadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWinchLoadPayloadRaw(context, request, cq);
  result->StartCall();
  return result;
}

WinchService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WinchService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WinchService::Service, ::mavsdk::rpc::winch::WinchRelaxRequest, ::mavsdk::rpc::winch::WinchRelaxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WinchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::winch::WinchRelaxRequest* req,
             ::mavsdk::rpc::winch::WinchRelaxResponse* resp) {
               return service->WinchRelax(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WinchService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WinchService::Service, ::mavsdk::rpc::winch::WinchRelativeLengthControlRequest, ::mavsdk::rpc::winch::WinchRelativeLengthControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WinchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::winch::WinchRelativeLengthControlRequest* req,
             ::mavsdk::rpc::winch::WinchRelativeLengthControlResponse* resp) {
               return service->WinchRelativeLengthControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WinchService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WinchService::Service, ::mavsdk::rpc::winch::WinchRateControlRequest, ::mavsdk::rpc::winch::WinchRateControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WinchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::winch::WinchRateControlRequest* req,
             ::mavsdk::rpc::winch::WinchRateControlResponse* resp) {
               return service->WinchRateControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WinchService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WinchService::Service, ::mavsdk::rpc::winch::WinchLockRequest, ::mavsdk::rpc::winch::WinchLockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WinchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::winch::WinchLockRequest* req,
             ::mavsdk::rpc::winch::WinchLockResponse* resp) {
               return service->WinchLock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WinchService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WinchService::Service, ::mavsdk::rpc::winch::WinchDeliverRequest, ::mavsdk::rpc::winch::WinchDeliverResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WinchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::winch::WinchDeliverRequest* req,
             ::mavsdk::rpc::winch::WinchDeliverResponse* resp) {
               return service->WinchDeliver(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WinchService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WinchService::Service, ::mavsdk::rpc::winch::WinchHoldRequest, ::mavsdk::rpc::winch::WinchHoldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WinchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::winch::WinchHoldRequest* req,
             ::mavsdk::rpc::winch::WinchHoldResponse* resp) {
               return service->WinchHold(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WinchService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WinchService::Service, ::mavsdk::rpc::winch::WinchRetractRequest, ::mavsdk::rpc::winch::WinchRetractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WinchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::winch::WinchRetractRequest* req,
             ::mavsdk::rpc::winch::WinchRetractResponse* resp) {
               return service->WinchRetract(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WinchService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WinchService::Service, ::mavsdk::rpc::winch::WinchLoadLineRequest, ::mavsdk::rpc::winch::WinchLoadLineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WinchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::winch::WinchLoadLineRequest* req,
             ::mavsdk::rpc::winch::WinchLoadLineResponse* resp) {
               return service->WinchLoadLine(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WinchService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WinchService::Service, ::mavsdk::rpc::winch::WinchAbandonLineRequest, ::mavsdk::rpc::winch::WinchAbandonLineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WinchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::winch::WinchAbandonLineRequest* req,
             ::mavsdk::rpc::winch::WinchAbandonLineResponse* resp) {
               return service->WinchAbandonLine(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WinchService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WinchService::Service, ::mavsdk::rpc::winch::WinchLoadPayloadRequest, ::mavsdk::rpc::winch::WinchLoadPayloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WinchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::winch::WinchLoadPayloadRequest* req,
             ::mavsdk::rpc::winch::WinchLoadPayloadResponse* resp) {
               return service->WinchLoadPayload(ctx, req, resp);
             }, this)));
}

WinchService::Service::~Service() {
}

::grpc::Status WinchService::Service::WinchRelax(::grpc::ServerContext* context, const ::mavsdk::rpc::winch::WinchRelaxRequest* request, ::mavsdk::rpc::winch::WinchRelaxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WinchService::Service::WinchRelativeLengthControl(::grpc::ServerContext* context, const ::mavsdk::rpc::winch::WinchRelativeLengthControlRequest* request, ::mavsdk::rpc::winch::WinchRelativeLengthControlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WinchService::Service::WinchRateControl(::grpc::ServerContext* context, const ::mavsdk::rpc::winch::WinchRateControlRequest* request, ::mavsdk::rpc::winch::WinchRateControlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WinchService::Service::WinchLock(::grpc::ServerContext* context, const ::mavsdk::rpc::winch::WinchLockRequest* request, ::mavsdk::rpc::winch::WinchLockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WinchService::Service::WinchDeliver(::grpc::ServerContext* context, const ::mavsdk::rpc::winch::WinchDeliverRequest* request, ::mavsdk::rpc::winch::WinchDeliverResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WinchService::Service::WinchHold(::grpc::ServerContext* context, const ::mavsdk::rpc::winch::WinchHoldRequest* request, ::mavsdk::rpc::winch::WinchHoldResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WinchService::Service::WinchRetract(::grpc::ServerContext* context, const ::mavsdk::rpc::winch::WinchRetractRequest* request, ::mavsdk::rpc::winch::WinchRetractResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WinchService::Service::WinchLoadLine(::grpc::ServerContext* context, const ::mavsdk::rpc::winch::WinchLoadLineRequest* request, ::mavsdk::rpc::winch::WinchLoadLineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WinchService::Service::WinchAbandonLine(::grpc::ServerContext* context, const ::mavsdk::rpc::winch::WinchAbandonLineRequest* request, ::mavsdk::rpc::winch::WinchAbandonLineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WinchService::Service::WinchLoadPayload(::grpc::ServerContext* context, const ::mavsdk::rpc::winch::WinchLoadPayloadRequest* request, ::mavsdk::rpc::winch::WinchLoadPayloadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace winch

