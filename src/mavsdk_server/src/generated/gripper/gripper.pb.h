// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gripper/gripper.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gripper_2fgripper_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gripper_2fgripper_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gripper_2fgripper_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gripper_2fgripper_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gripper_2fgripper_2eproto;
namespace mavsdk {
namespace rpc {
namespace gripper {
class GrabRequest;
struct GrabRequestDefaultTypeInternal;
extern GrabRequestDefaultTypeInternal _GrabRequest_default_instance_;
class GrabResponse;
struct GrabResponseDefaultTypeInternal;
extern GrabResponseDefaultTypeInternal _GrabResponse_default_instance_;
class GripperResult;
struct GripperResultDefaultTypeInternal;
extern GripperResultDefaultTypeInternal _GripperResult_default_instance_;
class ReleaseRequest;
struct ReleaseRequestDefaultTypeInternal;
extern ReleaseRequestDefaultTypeInternal _ReleaseRequest_default_instance_;
class ReleaseResponse;
struct ReleaseResponseDefaultTypeInternal;
extern ReleaseResponseDefaultTypeInternal _ReleaseResponse_default_instance_;
}  // namespace gripper
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::gripper::GrabRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::gripper::GrabRequest>(Arena*);
template<> ::mavsdk::rpc::gripper::GrabResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::gripper::GrabResponse>(Arena*);
template<> ::mavsdk::rpc::gripper::GripperResult* Arena::CreateMaybeMessage<::mavsdk::rpc::gripper::GripperResult>(Arena*);
template<> ::mavsdk::rpc::gripper::ReleaseRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::gripper::ReleaseRequest>(Arena*);
template<> ::mavsdk::rpc::gripper::ReleaseResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::gripper::ReleaseResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace gripper {

enum GripperResult_Result : int {
  GripperResult_Result_RESULT_UNKNOWN = 0,
  GripperResult_Result_RESULT_SUCCESS = 1,
  GripperResult_Result_RESULT_NO_SYSTEM = 2,
  GripperResult_Result_RESULT_CONNECTION_ERROR = 3,
  GripperResult_Result_RESULT_BUSY = 4,
  GripperResult_Result_RESULT_COMMAND_DENIED = 5,
  GripperResult_Result_RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN = 6,
  GripperResult_Result_RESULT_COMMAND_DENIED_NOT_LANDED = 7,
  GripperResult_Result_RESULT_TIMEOUT = 8,
  GripperResult_Result_RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN = 9,
  GripperResult_Result_RESULT_NO_VTOL_TRANSITION_SUPPORT = 10,
  GripperResult_Result_RESULT_PARAMETER_ERROR = 11,
  GripperResult_Result_RESULT_UNSUPPORTED = 12,
  GripperResult_Result_RESULT_FAILED = 13,
  GripperResult_Result_GripperResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GripperResult_Result_GripperResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GripperResult_Result_IsValid(int value);
constexpr GripperResult_Result GripperResult_Result_Result_MIN = GripperResult_Result_RESULT_UNKNOWN;
constexpr GripperResult_Result GripperResult_Result_Result_MAX = GripperResult_Result_RESULT_FAILED;
constexpr int GripperResult_Result_Result_ARRAYSIZE = GripperResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GripperResult_Result_descriptor();
template<typename T>
inline const std::string& GripperResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GripperResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GripperResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GripperResult_Result_descriptor(), enum_t_value);
}
inline bool GripperResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GripperResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GripperResult_Result>(
    GripperResult_Result_descriptor(), name, value);
}
enum GripperAction : int {
  GRIPPER_ACTION_RELEASE = 0,
  GRIPPER_ACTION_GRAB = 1,
  GripperAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GripperAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GripperAction_IsValid(int value);
constexpr GripperAction GripperAction_MIN = GRIPPER_ACTION_RELEASE;
constexpr GripperAction GripperAction_MAX = GRIPPER_ACTION_GRAB;
constexpr int GripperAction_ARRAYSIZE = GripperAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GripperAction_descriptor();
template<typename T>
inline const std::string& GripperAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GripperAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GripperAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GripperAction_descriptor(), enum_t_value);
}
inline bool GripperAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GripperAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GripperAction>(
    GripperAction_descriptor(), name, value);
}
// ===================================================================

class GrabRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gripper.GrabRequest) */ {
 public:
  inline GrabRequest() : GrabRequest(nullptr) {}
  ~GrabRequest() override;
  explicit PROTOBUF_CONSTEXPR GrabRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GrabRequest(const GrabRequest& from);
  GrabRequest(GrabRequest&& from) noexcept
    : GrabRequest() {
    *this = ::std::move(from);
  }

  inline GrabRequest& operator=(const GrabRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrabRequest& operator=(GrabRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GrabRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GrabRequest* internal_default_instance() {
    return reinterpret_cast<const GrabRequest*>(
               &_GrabRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GrabRequest& a, GrabRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GrabRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrabRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GrabRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GrabRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GrabRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GrabRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrabRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gripper.GrabRequest";
  }
  protected:
  explicit GrabRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gripper.GrabRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gripper_2fgripper_2eproto;
};
// -------------------------------------------------------------------

class GrabResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gripper.GrabResponse) */ {
 public:
  inline GrabResponse() : GrabResponse(nullptr) {}
  ~GrabResponse() override;
  explicit PROTOBUF_CONSTEXPR GrabResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GrabResponse(const GrabResponse& from);
  GrabResponse(GrabResponse&& from) noexcept
    : GrabResponse() {
    *this = ::std::move(from);
  }

  inline GrabResponse& operator=(const GrabResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrabResponse& operator=(GrabResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GrabResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GrabResponse* internal_default_instance() {
    return reinterpret_cast<const GrabResponse*>(
               &_GrabResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GrabResponse& a, GrabResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GrabResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrabResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GrabResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GrabResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GrabResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GrabResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrabResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gripper.GrabResponse";
  }
  protected:
  explicit GrabResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGripperResultFieldNumber = 1,
  };
  // .mavsdk.rpc.gripper.GripperResult gripper_result = 1;
  bool has_gripper_result() const;
  private:
  bool _internal_has_gripper_result() const;
  public:
  void clear_gripper_result();
  const ::mavsdk::rpc::gripper::GripperResult& gripper_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gripper::GripperResult* release_gripper_result();
  ::mavsdk::rpc::gripper::GripperResult* mutable_gripper_result();
  void set_allocated_gripper_result(::mavsdk::rpc::gripper::GripperResult* gripper_result);
  private:
  const ::mavsdk::rpc::gripper::GripperResult& _internal_gripper_result() const;
  ::mavsdk::rpc::gripper::GripperResult* _internal_mutable_gripper_result();
  public:
  void unsafe_arena_set_allocated_gripper_result(
      ::mavsdk::rpc::gripper::GripperResult* gripper_result);
  ::mavsdk::rpc::gripper::GripperResult* unsafe_arena_release_gripper_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gripper.GrabResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::gripper::GripperResult* gripper_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gripper_2fgripper_2eproto;
};
// -------------------------------------------------------------------

class ReleaseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gripper.ReleaseRequest) */ {
 public:
  inline ReleaseRequest() : ReleaseRequest(nullptr) {}
  ~ReleaseRequest() override;
  explicit PROTOBUF_CONSTEXPR ReleaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReleaseRequest(const ReleaseRequest& from);
  ReleaseRequest(ReleaseRequest&& from) noexcept
    : ReleaseRequest() {
    *this = ::std::move(from);
  }

  inline ReleaseRequest& operator=(const ReleaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseRequest& operator=(ReleaseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReleaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReleaseRequest* internal_default_instance() {
    return reinterpret_cast<const ReleaseRequest*>(
               &_ReleaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReleaseRequest& a, ReleaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReleaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReleaseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReleaseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReleaseRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gripper.ReleaseRequest";
  }
  protected:
  explicit ReleaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gripper.ReleaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gripper_2fgripper_2eproto;
};
// -------------------------------------------------------------------

class ReleaseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gripper.ReleaseResponse) */ {
 public:
  inline ReleaseResponse() : ReleaseResponse(nullptr) {}
  ~ReleaseResponse() override;
  explicit PROTOBUF_CONSTEXPR ReleaseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReleaseResponse(const ReleaseResponse& from);
  ReleaseResponse(ReleaseResponse&& from) noexcept
    : ReleaseResponse() {
    *this = ::std::move(from);
  }

  inline ReleaseResponse& operator=(const ReleaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseResponse& operator=(ReleaseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReleaseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReleaseResponse* internal_default_instance() {
    return reinterpret_cast<const ReleaseResponse*>(
               &_ReleaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReleaseResponse& a, ReleaseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReleaseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReleaseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReleaseResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReleaseResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gripper.ReleaseResponse";
  }
  protected:
  explicit ReleaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGripperResultFieldNumber = 1,
  };
  // .mavsdk.rpc.gripper.GripperResult gripper_result = 1;
  bool has_gripper_result() const;
  private:
  bool _internal_has_gripper_result() const;
  public:
  void clear_gripper_result();
  const ::mavsdk::rpc::gripper::GripperResult& gripper_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gripper::GripperResult* release_gripper_result();
  ::mavsdk::rpc::gripper::GripperResult* mutable_gripper_result();
  void set_allocated_gripper_result(::mavsdk::rpc::gripper::GripperResult* gripper_result);
  private:
  const ::mavsdk::rpc::gripper::GripperResult& _internal_gripper_result() const;
  ::mavsdk::rpc::gripper::GripperResult* _internal_mutable_gripper_result();
  public:
  void unsafe_arena_set_allocated_gripper_result(
      ::mavsdk::rpc::gripper::GripperResult* gripper_result);
  ::mavsdk::rpc::gripper::GripperResult* unsafe_arena_release_gripper_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gripper.ReleaseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::gripper::GripperResult* gripper_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gripper_2fgripper_2eproto;
};
// -------------------------------------------------------------------

class GripperResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gripper.GripperResult) */ {
 public:
  inline GripperResult() : GripperResult(nullptr) {}
  ~GripperResult() override;
  explicit PROTOBUF_CONSTEXPR GripperResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GripperResult(const GripperResult& from);
  GripperResult(GripperResult&& from) noexcept
    : GripperResult() {
    *this = ::std::move(from);
  }

  inline GripperResult& operator=(const GripperResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GripperResult& operator=(GripperResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GripperResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const GripperResult* internal_default_instance() {
    return reinterpret_cast<const GripperResult*>(
               &_GripperResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GripperResult& a, GripperResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GripperResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GripperResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GripperResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GripperResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GripperResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GripperResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GripperResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gripper.GripperResult";
  }
  protected:
  explicit GripperResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GripperResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    GripperResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    GripperResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM =
    GripperResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR =
    GripperResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_BUSY =
    GripperResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_COMMAND_DENIED =
    GripperResult_Result_RESULT_COMMAND_DENIED;
  static constexpr Result RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN =
    GripperResult_Result_RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN;
  static constexpr Result RESULT_COMMAND_DENIED_NOT_LANDED =
    GripperResult_Result_RESULT_COMMAND_DENIED_NOT_LANDED;
  static constexpr Result RESULT_TIMEOUT =
    GripperResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN =
    GripperResult_Result_RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN;
  static constexpr Result RESULT_NO_VTOL_TRANSITION_SUPPORT =
    GripperResult_Result_RESULT_NO_VTOL_TRANSITION_SUPPORT;
  static constexpr Result RESULT_PARAMETER_ERROR =
    GripperResult_Result_RESULT_PARAMETER_ERROR;
  static constexpr Result RESULT_UNSUPPORTED =
    GripperResult_Result_RESULT_UNSUPPORTED;
  static constexpr Result RESULT_FAILED =
    GripperResult_Result_RESULT_FAILED;
  static inline bool Result_IsValid(int value) {
    return GripperResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    GripperResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    GripperResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    GripperResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return GripperResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return GripperResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return GripperResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.gripper.GripperResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::gripper::GripperResult_Result result() const;
  void set_result(::mavsdk::rpc::gripper::GripperResult_Result value);
  private:
  ::mavsdk::rpc::gripper::GripperResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::gripper::GripperResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gripper.GripperResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gripper_2fgripper_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GrabRequest

// uint32 instance = 1;
inline void GrabRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t GrabRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t GrabRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gripper.GrabRequest.instance)
  return _internal_instance();
}
inline void GrabRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void GrabRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gripper.GrabRequest.instance)
}

// -------------------------------------------------------------------

// GrabResponse

// .mavsdk.rpc.gripper.GripperResult gripper_result = 1;
inline bool GrabResponse::_internal_has_gripper_result() const {
  return this != internal_default_instance() && gripper_result_ != nullptr;
}
inline bool GrabResponse::has_gripper_result() const {
  return _internal_has_gripper_result();
}
inline void GrabResponse::clear_gripper_result() {
  if (GetArenaForAllocation() == nullptr && gripper_result_ != nullptr) {
    delete gripper_result_;
  }
  gripper_result_ = nullptr;
}
inline const ::mavsdk::rpc::gripper::GripperResult& GrabResponse::_internal_gripper_result() const {
  const ::mavsdk::rpc::gripper::GripperResult* p = gripper_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gripper::GripperResult&>(
      ::mavsdk::rpc::gripper::_GripperResult_default_instance_);
}
inline const ::mavsdk::rpc::gripper::GripperResult& GrabResponse::gripper_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gripper.GrabResponse.gripper_result)
  return _internal_gripper_result();
}
inline void GrabResponse::unsafe_arena_set_allocated_gripper_result(
    ::mavsdk::rpc::gripper::GripperResult* gripper_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gripper_result_);
  }
  gripper_result_ = gripper_result;
  if (gripper_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gripper.GrabResponse.gripper_result)
}
inline ::mavsdk::rpc::gripper::GripperResult* GrabResponse::release_gripper_result() {
  
  ::mavsdk::rpc::gripper::GripperResult* temp = gripper_result_;
  gripper_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gripper::GripperResult* GrabResponse::unsafe_arena_release_gripper_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gripper.GrabResponse.gripper_result)
  
  ::mavsdk::rpc::gripper::GripperResult* temp = gripper_result_;
  gripper_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gripper::GripperResult* GrabResponse::_internal_mutable_gripper_result() {
  
  if (gripper_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gripper::GripperResult>(GetArenaForAllocation());
    gripper_result_ = p;
  }
  return gripper_result_;
}
inline ::mavsdk::rpc::gripper::GripperResult* GrabResponse::mutable_gripper_result() {
  ::mavsdk::rpc::gripper::GripperResult* _msg = _internal_mutable_gripper_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gripper.GrabResponse.gripper_result)
  return _msg;
}
inline void GrabResponse::set_allocated_gripper_result(::mavsdk::rpc::gripper::GripperResult* gripper_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete gripper_result_;
  }
  if (gripper_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gripper_result);
    if (message_arena != submessage_arena) {
      gripper_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gripper_result, submessage_arena);
    }
    
  } else {
    
  }
  gripper_result_ = gripper_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gripper.GrabResponse.gripper_result)
}

// -------------------------------------------------------------------

// ReleaseRequest

// uint32 instance = 1;
inline void ReleaseRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t ReleaseRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t ReleaseRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gripper.ReleaseRequest.instance)
  return _internal_instance();
}
inline void ReleaseRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void ReleaseRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gripper.ReleaseRequest.instance)
}

// -------------------------------------------------------------------

// ReleaseResponse

// .mavsdk.rpc.gripper.GripperResult gripper_result = 1;
inline bool ReleaseResponse::_internal_has_gripper_result() const {
  return this != internal_default_instance() && gripper_result_ != nullptr;
}
inline bool ReleaseResponse::has_gripper_result() const {
  return _internal_has_gripper_result();
}
inline void ReleaseResponse::clear_gripper_result() {
  if (GetArenaForAllocation() == nullptr && gripper_result_ != nullptr) {
    delete gripper_result_;
  }
  gripper_result_ = nullptr;
}
inline const ::mavsdk::rpc::gripper::GripperResult& ReleaseResponse::_internal_gripper_result() const {
  const ::mavsdk::rpc::gripper::GripperResult* p = gripper_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gripper::GripperResult&>(
      ::mavsdk::rpc::gripper::_GripperResult_default_instance_);
}
inline const ::mavsdk::rpc::gripper::GripperResult& ReleaseResponse::gripper_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gripper.ReleaseResponse.gripper_result)
  return _internal_gripper_result();
}
inline void ReleaseResponse::unsafe_arena_set_allocated_gripper_result(
    ::mavsdk::rpc::gripper::GripperResult* gripper_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gripper_result_);
  }
  gripper_result_ = gripper_result;
  if (gripper_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gripper.ReleaseResponse.gripper_result)
}
inline ::mavsdk::rpc::gripper::GripperResult* ReleaseResponse::release_gripper_result() {
  
  ::mavsdk::rpc::gripper::GripperResult* temp = gripper_result_;
  gripper_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gripper::GripperResult* ReleaseResponse::unsafe_arena_release_gripper_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gripper.ReleaseResponse.gripper_result)
  
  ::mavsdk::rpc::gripper::GripperResult* temp = gripper_result_;
  gripper_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gripper::GripperResult* ReleaseResponse::_internal_mutable_gripper_result() {
  
  if (gripper_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gripper::GripperResult>(GetArenaForAllocation());
    gripper_result_ = p;
  }
  return gripper_result_;
}
inline ::mavsdk::rpc::gripper::GripperResult* ReleaseResponse::mutable_gripper_result() {
  ::mavsdk::rpc::gripper::GripperResult* _msg = _internal_mutable_gripper_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gripper.ReleaseResponse.gripper_result)
  return _msg;
}
inline void ReleaseResponse::set_allocated_gripper_result(::mavsdk::rpc::gripper::GripperResult* gripper_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete gripper_result_;
  }
  if (gripper_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gripper_result);
    if (message_arena != submessage_arena) {
      gripper_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gripper_result, submessage_arena);
    }
    
  } else {
    
  }
  gripper_result_ = gripper_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gripper.ReleaseResponse.gripper_result)
}

// -------------------------------------------------------------------

// GripperResult

// .mavsdk.rpc.gripper.GripperResult.Result result = 1;
inline void GripperResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::gripper::GripperResult_Result GripperResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::gripper::GripperResult_Result >(result_);
}
inline ::mavsdk::rpc::gripper::GripperResult_Result GripperResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gripper.GripperResult.result)
  return _internal_result();
}
inline void GripperResult::_internal_set_result(::mavsdk::rpc::gripper::GripperResult_Result value) {
  
  result_ = value;
}
inline void GripperResult::set_result(::mavsdk::rpc::gripper::GripperResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gripper.GripperResult.result)
}

// string result_str = 2;
inline void GripperResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& GripperResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gripper.GripperResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GripperResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gripper.GripperResult.result_str)
}
inline std::string* GripperResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gripper.GripperResult.result_str)
  return _s;
}
inline const std::string& GripperResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void GripperResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* GripperResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* GripperResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gripper.GripperResult.result_str)
  return result_str_.Release();
}
inline void GripperResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_str_.IsDefault()) {
    result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gripper.GripperResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gripper
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::gripper::GripperResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::gripper::GripperResult_Result>() {
  return ::mavsdk::rpc::gripper::GripperResult_Result_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::gripper::GripperAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::gripper::GripperAction>() {
  return ::mavsdk::rpc::gripper::GripperAction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gripper_2fgripper_2eproto
