// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gripper/gripper.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gripper_2fgripper_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gripper_2fgripper_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gripper_2fgripper_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gripper_2fgripper_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gripper_2fgripper_2eproto;
namespace mavsdk {
namespace rpc {
namespace gripper {
class GripperGrabRequest;
struct GripperGrabRequestDefaultTypeInternal;
extern GripperGrabRequestDefaultTypeInternal _GripperGrabRequest_default_instance_;
class GripperGrabResponse;
struct GripperGrabResponseDefaultTypeInternal;
extern GripperGrabResponseDefaultTypeInternal _GripperGrabResponse_default_instance_;
class GripperReleaseRequest;
struct GripperReleaseRequestDefaultTypeInternal;
extern GripperReleaseRequestDefaultTypeInternal _GripperReleaseRequest_default_instance_;
class GripperReleaseResponse;
struct GripperReleaseResponseDefaultTypeInternal;
extern GripperReleaseResponseDefaultTypeInternal _GripperReleaseResponse_default_instance_;
class GripperResult;
struct GripperResultDefaultTypeInternal;
extern GripperResultDefaultTypeInternal _GripperResult_default_instance_;
}  // namespace gripper
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::gripper::GripperGrabRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::gripper::GripperGrabRequest>(Arena*);
template<> ::mavsdk::rpc::gripper::GripperGrabResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::gripper::GripperGrabResponse>(Arena*);
template<> ::mavsdk::rpc::gripper::GripperReleaseRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::gripper::GripperReleaseRequest>(Arena*);
template<> ::mavsdk::rpc::gripper::GripperReleaseResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::gripper::GripperReleaseResponse>(Arena*);
template<> ::mavsdk::rpc::gripper::GripperResult* Arena::CreateMaybeMessage<::mavsdk::rpc::gripper::GripperResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace gripper {

enum GripperResult_Result : int {
  GripperResult_Result_RESULT_UNKNOWN = 0,
  GripperResult_Result_RESULT_SUCCESS = 1,
  GripperResult_Result_RESULT_NO_SYSTEM = 2,
  GripperResult_Result_RESULT_CONNECTION_ERROR = 3,
  GripperResult_Result_RESULT_BUSY = 4,
  GripperResult_Result_RESULT_COMMAND_DENIED = 5,
  GripperResult_Result_RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN = 6,
  GripperResult_Result_RESULT_COMMAND_DENIED_NOT_LANDED = 7,
  GripperResult_Result_RESULT_TIMEOUT = 8,
  GripperResult_Result_RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN = 9,
  GripperResult_Result_RESULT_NO_VTOL_TRANSITION_SUPPORT = 10,
  GripperResult_Result_RESULT_PARAMETER_ERROR = 11,
  GripperResult_Result_RESULT_UNSUPPORTED = 12,
  GripperResult_Result_RESULT_FAILED = 13,
  GripperResult_Result_GripperResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GripperResult_Result_GripperResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GripperResult_Result_IsValid(int value);
constexpr GripperResult_Result GripperResult_Result_Result_MIN = GripperResult_Result_RESULT_UNKNOWN;
constexpr GripperResult_Result GripperResult_Result_Result_MAX = GripperResult_Result_RESULT_FAILED;
constexpr int GripperResult_Result_Result_ARRAYSIZE = GripperResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GripperResult_Result_descriptor();
template<typename T>
inline const std::string& GripperResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GripperResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GripperResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GripperResult_Result_descriptor(), enum_t_value);
}
inline bool GripperResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GripperResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GripperResult_Result>(
    GripperResult_Result_descriptor(), name, value);
}
enum GripperAction : int {
  GRIPPER_ACTION_RELEASE = 0,
  GRIPPER_ACTION_GRAB = 1,
  GripperAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GripperAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GripperAction_IsValid(int value);
constexpr GripperAction GripperAction_MIN = GRIPPER_ACTION_RELEASE;
constexpr GripperAction GripperAction_MAX = GRIPPER_ACTION_GRAB;
constexpr int GripperAction_ARRAYSIZE = GripperAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GripperAction_descriptor();
template<typename T>
inline const std::string& GripperAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GripperAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GripperAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GripperAction_descriptor(), enum_t_value);
}
inline bool GripperAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GripperAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GripperAction>(
    GripperAction_descriptor(), name, value);
}
// ===================================================================

class GripperGrabRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gripper.GripperGrabRequest) */ {
 public:
  inline GripperGrabRequest() : GripperGrabRequest(nullptr) {}
  ~GripperGrabRequest() override;
  explicit PROTOBUF_CONSTEXPR GripperGrabRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GripperGrabRequest(const GripperGrabRequest& from);
  GripperGrabRequest(GripperGrabRequest&& from) noexcept
    : GripperGrabRequest() {
    *this = ::std::move(from);
  }

  inline GripperGrabRequest& operator=(const GripperGrabRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GripperGrabRequest& operator=(GripperGrabRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GripperGrabRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GripperGrabRequest* internal_default_instance() {
    return reinterpret_cast<const GripperGrabRequest*>(
               &_GripperGrabRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GripperGrabRequest& a, GripperGrabRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GripperGrabRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GripperGrabRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GripperGrabRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GripperGrabRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GripperGrabRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GripperGrabRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GripperGrabRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gripper.GripperGrabRequest";
  }
  protected:
  explicit GripperGrabRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gripper.GripperGrabRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gripper_2fgripper_2eproto;
};
// -------------------------------------------------------------------

class GripperGrabResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gripper.GripperGrabResponse) */ {
 public:
  inline GripperGrabResponse() : GripperGrabResponse(nullptr) {}
  ~GripperGrabResponse() override;
  explicit PROTOBUF_CONSTEXPR GripperGrabResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GripperGrabResponse(const GripperGrabResponse& from);
  GripperGrabResponse(GripperGrabResponse&& from) noexcept
    : GripperGrabResponse() {
    *this = ::std::move(from);
  }

  inline GripperGrabResponse& operator=(const GripperGrabResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GripperGrabResponse& operator=(GripperGrabResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GripperGrabResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GripperGrabResponse* internal_default_instance() {
    return reinterpret_cast<const GripperGrabResponse*>(
               &_GripperGrabResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GripperGrabResponse& a, GripperGrabResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GripperGrabResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GripperGrabResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GripperGrabResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GripperGrabResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GripperGrabResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GripperGrabResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GripperGrabResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gripper.GripperGrabResponse";
  }
  protected:
  explicit GripperGrabResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGripperResultFieldNumber = 1,
  };
  // .mavsdk.rpc.gripper.GripperResult gripper_result = 1;
  bool has_gripper_result() const;
  private:
  bool _internal_has_gripper_result() const;
  public:
  void clear_gripper_result();
  const ::mavsdk::rpc::gripper::GripperResult& gripper_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gripper::GripperResult* release_gripper_result();
  ::mavsdk::rpc::gripper::GripperResult* mutable_gripper_result();
  void set_allocated_gripper_result(::mavsdk::rpc::gripper::GripperResult* gripper_result);
  private:
  const ::mavsdk::rpc::gripper::GripperResult& _internal_gripper_result() const;
  ::mavsdk::rpc::gripper::GripperResult* _internal_mutable_gripper_result();
  public:
  void unsafe_arena_set_allocated_gripper_result(
      ::mavsdk::rpc::gripper::GripperResult* gripper_result);
  ::mavsdk::rpc::gripper::GripperResult* unsafe_arena_release_gripper_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gripper.GripperGrabResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::gripper::GripperResult* gripper_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gripper_2fgripper_2eproto;
};
// -------------------------------------------------------------------

class GripperReleaseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gripper.GripperReleaseRequest) */ {
 public:
  inline GripperReleaseRequest() : GripperReleaseRequest(nullptr) {}
  ~GripperReleaseRequest() override;
  explicit PROTOBUF_CONSTEXPR GripperReleaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GripperReleaseRequest(const GripperReleaseRequest& from);
  GripperReleaseRequest(GripperReleaseRequest&& from) noexcept
    : GripperReleaseRequest() {
    *this = ::std::move(from);
  }

  inline GripperReleaseRequest& operator=(const GripperReleaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GripperReleaseRequest& operator=(GripperReleaseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GripperReleaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GripperReleaseRequest* internal_default_instance() {
    return reinterpret_cast<const GripperReleaseRequest*>(
               &_GripperReleaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GripperReleaseRequest& a, GripperReleaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GripperReleaseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GripperReleaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GripperReleaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GripperReleaseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GripperReleaseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GripperReleaseRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GripperReleaseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gripper.GripperReleaseRequest";
  }
  protected:
  explicit GripperReleaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // uint32 instance = 1;
  void clear_instance();
  uint32_t instance() const;
  void set_instance(uint32_t value);
  private:
  uint32_t _internal_instance() const;
  void _internal_set_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gripper.GripperReleaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gripper_2fgripper_2eproto;
};
// -------------------------------------------------------------------

class GripperReleaseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gripper.GripperReleaseResponse) */ {
 public:
  inline GripperReleaseResponse() : GripperReleaseResponse(nullptr) {}
  ~GripperReleaseResponse() override;
  explicit PROTOBUF_CONSTEXPR GripperReleaseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GripperReleaseResponse(const GripperReleaseResponse& from);
  GripperReleaseResponse(GripperReleaseResponse&& from) noexcept
    : GripperReleaseResponse() {
    *this = ::std::move(from);
  }

  inline GripperReleaseResponse& operator=(const GripperReleaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GripperReleaseResponse& operator=(GripperReleaseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GripperReleaseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GripperReleaseResponse* internal_default_instance() {
    return reinterpret_cast<const GripperReleaseResponse*>(
               &_GripperReleaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GripperReleaseResponse& a, GripperReleaseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GripperReleaseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GripperReleaseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GripperReleaseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GripperReleaseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GripperReleaseResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GripperReleaseResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GripperReleaseResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gripper.GripperReleaseResponse";
  }
  protected:
  explicit GripperReleaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGripperResultFieldNumber = 1,
  };
  // .mavsdk.rpc.gripper.GripperResult gripper_result = 1;
  bool has_gripper_result() const;
  private:
  bool _internal_has_gripper_result() const;
  public:
  void clear_gripper_result();
  const ::mavsdk::rpc::gripper::GripperResult& gripper_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gripper::GripperResult* release_gripper_result();
  ::mavsdk::rpc::gripper::GripperResult* mutable_gripper_result();
  void set_allocated_gripper_result(::mavsdk::rpc::gripper::GripperResult* gripper_result);
  private:
  const ::mavsdk::rpc::gripper::GripperResult& _internal_gripper_result() const;
  ::mavsdk::rpc::gripper::GripperResult* _internal_mutable_gripper_result();
  public:
  void unsafe_arena_set_allocated_gripper_result(
      ::mavsdk::rpc::gripper::GripperResult* gripper_result);
  ::mavsdk::rpc::gripper::GripperResult* unsafe_arena_release_gripper_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gripper.GripperReleaseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::gripper::GripperResult* gripper_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gripper_2fgripper_2eproto;
};
// -------------------------------------------------------------------

class GripperResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.gripper.GripperResult) */ {
 public:
  inline GripperResult() : GripperResult(nullptr) {}
  ~GripperResult() override;
  explicit PROTOBUF_CONSTEXPR GripperResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GripperResult(const GripperResult& from);
  GripperResult(GripperResult&& from) noexcept
    : GripperResult() {
    *this = ::std::move(from);
  }

  inline GripperResult& operator=(const GripperResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GripperResult& operator=(GripperResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GripperResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const GripperResult* internal_default_instance() {
    return reinterpret_cast<const GripperResult*>(
               &_GripperResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GripperResult& a, GripperResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GripperResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GripperResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GripperResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GripperResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GripperResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GripperResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GripperResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.gripper.GripperResult";
  }
  protected:
  explicit GripperResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GripperResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    GripperResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    GripperResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM =
    GripperResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR =
    GripperResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_BUSY =
    GripperResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_COMMAND_DENIED =
    GripperResult_Result_RESULT_COMMAND_DENIED;
  static constexpr Result RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN =
    GripperResult_Result_RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN;
  static constexpr Result RESULT_COMMAND_DENIED_NOT_LANDED =
    GripperResult_Result_RESULT_COMMAND_DENIED_NOT_LANDED;
  static constexpr Result RESULT_TIMEOUT =
    GripperResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN =
    GripperResult_Result_RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN;
  static constexpr Result RESULT_NO_VTOL_TRANSITION_SUPPORT =
    GripperResult_Result_RESULT_NO_VTOL_TRANSITION_SUPPORT;
  static constexpr Result RESULT_PARAMETER_ERROR =
    GripperResult_Result_RESULT_PARAMETER_ERROR;
  static constexpr Result RESULT_UNSUPPORTED =
    GripperResult_Result_RESULT_UNSUPPORTED;
  static constexpr Result RESULT_FAILED =
    GripperResult_Result_RESULT_FAILED;
  static inline bool Result_IsValid(int value) {
    return GripperResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    GripperResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    GripperResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    GripperResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return GripperResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return GripperResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return GripperResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.gripper.GripperResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::gripper::GripperResult_Result result() const;
  void set_result(::mavsdk::rpc::gripper::GripperResult_Result value);
  private:
  ::mavsdk::rpc::gripper::GripperResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::gripper::GripperResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gripper.GripperResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gripper_2fgripper_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GripperGrabRequest

// uint32 instance = 1;
inline void GripperGrabRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t GripperGrabRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t GripperGrabRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gripper.GripperGrabRequest.instance)
  return _internal_instance();
}
inline void GripperGrabRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void GripperGrabRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gripper.GripperGrabRequest.instance)
}

// -------------------------------------------------------------------

// GripperGrabResponse

// .mavsdk.rpc.gripper.GripperResult gripper_result = 1;
inline bool GripperGrabResponse::_internal_has_gripper_result() const {
  return this != internal_default_instance() && gripper_result_ != nullptr;
}
inline bool GripperGrabResponse::has_gripper_result() const {
  return _internal_has_gripper_result();
}
inline void GripperGrabResponse::clear_gripper_result() {
  if (GetArenaForAllocation() == nullptr && gripper_result_ != nullptr) {
    delete gripper_result_;
  }
  gripper_result_ = nullptr;
}
inline const ::mavsdk::rpc::gripper::GripperResult& GripperGrabResponse::_internal_gripper_result() const {
  const ::mavsdk::rpc::gripper::GripperResult* p = gripper_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gripper::GripperResult&>(
      ::mavsdk::rpc::gripper::_GripperResult_default_instance_);
}
inline const ::mavsdk::rpc::gripper::GripperResult& GripperGrabResponse::gripper_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gripper.GripperGrabResponse.gripper_result)
  return _internal_gripper_result();
}
inline void GripperGrabResponse::unsafe_arena_set_allocated_gripper_result(
    ::mavsdk::rpc::gripper::GripperResult* gripper_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gripper_result_);
  }
  gripper_result_ = gripper_result;
  if (gripper_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gripper.GripperGrabResponse.gripper_result)
}
inline ::mavsdk::rpc::gripper::GripperResult* GripperGrabResponse::release_gripper_result() {
  
  ::mavsdk::rpc::gripper::GripperResult* temp = gripper_result_;
  gripper_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gripper::GripperResult* GripperGrabResponse::unsafe_arena_release_gripper_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gripper.GripperGrabResponse.gripper_result)
  
  ::mavsdk::rpc::gripper::GripperResult* temp = gripper_result_;
  gripper_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gripper::GripperResult* GripperGrabResponse::_internal_mutable_gripper_result() {
  
  if (gripper_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gripper::GripperResult>(GetArenaForAllocation());
    gripper_result_ = p;
  }
  return gripper_result_;
}
inline ::mavsdk::rpc::gripper::GripperResult* GripperGrabResponse::mutable_gripper_result() {
  ::mavsdk::rpc::gripper::GripperResult* _msg = _internal_mutable_gripper_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gripper.GripperGrabResponse.gripper_result)
  return _msg;
}
inline void GripperGrabResponse::set_allocated_gripper_result(::mavsdk::rpc::gripper::GripperResult* gripper_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete gripper_result_;
  }
  if (gripper_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gripper_result);
    if (message_arena != submessage_arena) {
      gripper_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gripper_result, submessage_arena);
    }
    
  } else {
    
  }
  gripper_result_ = gripper_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gripper.GripperGrabResponse.gripper_result)
}

// -------------------------------------------------------------------

// GripperReleaseRequest

// uint32 instance = 1;
inline void GripperReleaseRequest::clear_instance() {
  instance_ = 0u;
}
inline uint32_t GripperReleaseRequest::_internal_instance() const {
  return instance_;
}
inline uint32_t GripperReleaseRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gripper.GripperReleaseRequest.instance)
  return _internal_instance();
}
inline void GripperReleaseRequest::_internal_set_instance(uint32_t value) {
  
  instance_ = value;
}
inline void GripperReleaseRequest::set_instance(uint32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gripper.GripperReleaseRequest.instance)
}

// -------------------------------------------------------------------

// GripperReleaseResponse

// .mavsdk.rpc.gripper.GripperResult gripper_result = 1;
inline bool GripperReleaseResponse::_internal_has_gripper_result() const {
  return this != internal_default_instance() && gripper_result_ != nullptr;
}
inline bool GripperReleaseResponse::has_gripper_result() const {
  return _internal_has_gripper_result();
}
inline void GripperReleaseResponse::clear_gripper_result() {
  if (GetArenaForAllocation() == nullptr && gripper_result_ != nullptr) {
    delete gripper_result_;
  }
  gripper_result_ = nullptr;
}
inline const ::mavsdk::rpc::gripper::GripperResult& GripperReleaseResponse::_internal_gripper_result() const {
  const ::mavsdk::rpc::gripper::GripperResult* p = gripper_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gripper::GripperResult&>(
      ::mavsdk::rpc::gripper::_GripperResult_default_instance_);
}
inline const ::mavsdk::rpc::gripper::GripperResult& GripperReleaseResponse::gripper_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gripper.GripperReleaseResponse.gripper_result)
  return _internal_gripper_result();
}
inline void GripperReleaseResponse::unsafe_arena_set_allocated_gripper_result(
    ::mavsdk::rpc::gripper::GripperResult* gripper_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gripper_result_);
  }
  gripper_result_ = gripper_result;
  if (gripper_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gripper.GripperReleaseResponse.gripper_result)
}
inline ::mavsdk::rpc::gripper::GripperResult* GripperReleaseResponse::release_gripper_result() {
  
  ::mavsdk::rpc::gripper::GripperResult* temp = gripper_result_;
  gripper_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::gripper::GripperResult* GripperReleaseResponse::unsafe_arena_release_gripper_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gripper.GripperReleaseResponse.gripper_result)
  
  ::mavsdk::rpc::gripper::GripperResult* temp = gripper_result_;
  gripper_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gripper::GripperResult* GripperReleaseResponse::_internal_mutable_gripper_result() {
  
  if (gripper_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::gripper::GripperResult>(GetArenaForAllocation());
    gripper_result_ = p;
  }
  return gripper_result_;
}
inline ::mavsdk::rpc::gripper::GripperResult* GripperReleaseResponse::mutable_gripper_result() {
  ::mavsdk::rpc::gripper::GripperResult* _msg = _internal_mutable_gripper_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gripper.GripperReleaseResponse.gripper_result)
  return _msg;
}
inline void GripperReleaseResponse::set_allocated_gripper_result(::mavsdk::rpc::gripper::GripperResult* gripper_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete gripper_result_;
  }
  if (gripper_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gripper_result);
    if (message_arena != submessage_arena) {
      gripper_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gripper_result, submessage_arena);
    }
    
  } else {
    
  }
  gripper_result_ = gripper_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gripper.GripperReleaseResponse.gripper_result)
}

// -------------------------------------------------------------------

// GripperResult

// .mavsdk.rpc.gripper.GripperResult.Result result = 1;
inline void GripperResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::gripper::GripperResult_Result GripperResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::gripper::GripperResult_Result >(result_);
}
inline ::mavsdk::rpc::gripper::GripperResult_Result GripperResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gripper.GripperResult.result)
  return _internal_result();
}
inline void GripperResult::_internal_set_result(::mavsdk::rpc::gripper::GripperResult_Result value) {
  
  result_ = value;
}
inline void GripperResult::set_result(::mavsdk::rpc::gripper::GripperResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gripper.GripperResult.result)
}

// string result_str = 2;
inline void GripperResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& GripperResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gripper.GripperResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GripperResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gripper.GripperResult.result_str)
}
inline std::string* GripperResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gripper.GripperResult.result_str)
  return _s;
}
inline const std::string& GripperResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void GripperResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(value, GetArenaForAllocation());
}
inline std::string* GripperResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(GetArenaForAllocation());
}
inline std::string* GripperResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gripper.GripperResult.result_str)
  return result_str_.Release();
}
inline void GripperResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(result_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_str_.IsDefault()) {
    result_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gripper.GripperResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gripper
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::gripper::GripperResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::gripper::GripperResult_Result>() {
  return ::mavsdk::rpc::gripper::GripperResult_Result_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::gripper::GripperAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::gripper::GripperAction>() {
  return ::mavsdk::rpc::gripper::GripperAction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gripper_2fgripper_2eproto
